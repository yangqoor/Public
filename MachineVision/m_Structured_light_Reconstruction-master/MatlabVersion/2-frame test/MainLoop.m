% Load parameters
clear;
load EpipolarPara.mat
load GeneralPara.mat

% Read information of 1st frame
cam_mats = cell(total_frame_num, 1);
depth_mats = cell(total_frame_num, 1);
valid_mats = cell(total_frame_num, 1);
corres_mats = cell(total_frame_num, 1);
[depth_mats{1,1}, corres_mats{1,1}, optical_mat] = fun_InitDepthMat(FilePath, ...
    CamInfo, ...
    ProInfo, ...
    ParaSet);
tmp_image = double(imread([FilePath.main_file_path, ...
    FilePath.img_file_path, ...
    FilePath.img_file_name, ...
    num2str(1), ...
    FilePath.img_file_suffix]));
cam_mats{1, 1} = tmp_image(CamInfo.cam_range(2,1):CamInfo.cam_range(2,2), ...
    CamInfo.cam_range(1,1):CamInfo.cam_range(1,2));
tmp_image = double(imread([FilePath.main_file_path, ...
    FilePath.img_file_path, ...
    FilePath.img_file_name, ...
    num2str(12), ...
    FilePath.img_file_suffix]));
cam_mats{2, 1} = tmp_image(CamInfo.cam_range(2,1):CamInfo.cam_range(2,2), ...
    CamInfo.cam_range(1,1):CamInfo.cam_range(1,2));
opt_mat = optical_mat(CamInfo.cam_range(2,1):CamInfo.cam_range(2,2), ...
    CamInfo.cam_range(1,1):CamInfo.cam_range(1,2));

show_mat = zeros(CamInfo.RANGE_HEIGHT, CamInfo.RANGE_WIDTH, 3);
show_mat(:, :, 1) = double(cam_mats{1,1}) / 255;
show_mat(:, :, 2) = show_mat(:, :, 1);
show_mat(:, :, 3) = show_mat(:, :, 1);
for h = 1:51
    for w = 1:51
        h_c = corres_mats{1,1}{h,w}(1,1) - CamInfo.cam_range(2,1) + 1;
        w_c = corres_mats{1,1}{h,w}(1,2) - CamInfo.cam_range(1,1) + 1;
        show_mat(h_c, w_c, :) = 0.0;
        show_mat(h_c, w_c, 1) = 1.0;
    end
end

% Prepare for Optimization
color_table = zeros(ProInfo.RANGE_HEIGHT*ProInfo.RANGE_WIDTH, 1);
sigma_table = zeros(ProInfo.RANGE_HEIGHT*ProInfo.RANGE_WIDTH, 2);
for pvec_idx = 1:ProInfo.RANGE_HEIGHT*ProInfo.RANGE_WIDTH
    h_pro = ParaSet.coord_pro(pvec_idx,1);
    w_pro = ParaSet.coord_pro(pvec_idx,2);
    x_pro = ProInfo.pro_range(1,1) + (w_pro-1)*3 + 1;
    y_pro = ProInfo.pro_range(2,1) + (h_pro-1)*3 + 1;
%     color_index = round((pattern(y_pro, x_pro)-60)/35);
%     if color_index == 0
%         color_index = 1;
%     end
%     color_table(pvec_idx, 1) = ParaSet.gauss(color_index, 1);
%     sigma_table(pvec_idx, 1) = ParaSet.gauss(color_index, 2);
%     sigma_table(pvec_idx, 2) = ParaSet.gauss(color_index, 3);
    x_cam = corres_mats{1,1}{h_pro,w_pro}(1,2) - CamInfo.cam_range(1,1) + 1;
    y_cam = corres_mats{1,1}{h_pro,w_pro}(1,1) - CamInfo.cam_range(2,1) + 1;
    sigma_table(pvec_idx, :) = 2;
    color_table(pvec_idx,1) = (cam_mats{1,1}(y_cam, x_cam)-40) ...
        * 2 * pi * sigma_table(pvec_idx,1) * sigma_table(pvec_idx,2);
end
last_depth_vec = reshape(depth_mats{1,1}', ...
    ProInfo.RANGE_HEIGHT*ProInfo.RANGE_WIDTH, 1);
delta_depth_vec = zeros(ProInfo.RANGE_HEIGHT*ProInfo.RANGE_WIDTH, 1);
image_vec = reshape(cam_mats{2,1}', ...
    CamInfo.RANGE_HEIGHT*CamInfo.RANGE_WIDTH, 1);
C_set = zeros(ProInfo.RANGE_HEIGHT*ProInfo.RANGE_WIDTH, 3);
C_set(:,1) = ParaSet.M(:,1).*last_depth_vec + ParaSet.D(:,1);
C_set(:,3) = ParaSet.M(:,3).*last_depth_vec + ParaSet.D(:,3);


% Begin iteration
[projected_vecmat, valid_index] = fun_ProjectedImage(delta_depth_vec, ...
    color_table, ...
    sigma_table, ...
    CamInfo, ...
    ProInfo, ...
    EpiLine, ...
    C_set, ...
    ParaSet);
projected_vec = sum(projected_vecmat, 2) + 20;
iter_times = 80;
iterative_vecs = cell(iter_times, 1);
iterative_vecs{1,1} = projected_vec;
error_value = zeros(iter_times, 1);
error_value(1,1) = fun_ErrorFunction(image_vec, ...
    projected_vec, ...
    valid_index, ...
    last_depth_vec, ...
    delta_depth_vec, ...
    ParaSet);
alpha = 2;
theta = 2;
fprintf('iter1: error=%.2f\n', error_value(1,1));
% figure(1), fun_ShowImage(projected_vec, CamInfo)

for iter_idx = 2:iter_times
    % Set derv direction
    fprintf(['iter', num2str(iter_idx), ':']);
    projected_derv_vecmat = fun_ProjectedImageDerv(projected_vecmat, ...
        valid_index, ...
        delta_depth_vec, ...
        color_table, ...
        sigma_table, ...
        CamInfo, ...
        ProInfo, ...
        EpiLine, ...
        C_set, ...
        ParaSet);
    norm_derv_vec = fun_ErrorFunctionDerv(image_vec, ...
        projected_vec, ...
        valid_index, ...
        last_depth_vec, ...
        delta_depth_vec, ...
        projected_derv_vecmat, ...
        theta, ...
        ParaSet);

    % Set new delta_depth_vec
    delta_depth_vec = delta_depth_vec - alpha * norm_derv_vec;

    % Calculate now error function
    [projected_vecmat, valid_index] = fun_ProjectedImage(delta_depth_vec, ...
        color_table, ...
        sigma_table, ...
        CamInfo, ...
        ProInfo, ...
        EpiLine, ...
        C_set, ...
        ParaSet);
    projected_vec = sum(projected_vecmat, 2) + 20;
%     figure(1), fun_ShowImage(projected_vec, CamInfo)
    iterative_vecs{iter_idx,1} = projected_vec;
    error_value(iter_idx,1) = fun_ErrorFunction(image_vec, ...
        projected_vec, ...
        valid_index, ...
        last_depth_vec, ...
        delta_depth_vec, ...
        ParaSet);
    fprintf(' error=%.2f\n', error_value(iter_idx,1));
end

fid_ori = fopen('initial_depth.txt', 'wt');
fid_res = fopen('result_depth.txt', 'wt');
for h_pro = 1:ProInfo.RANGE_HEIGHT
    for w_pro = 1:ProInfo.RANGE_WIDTH
        pvec_idx = (h_pro-1)*ProInfo.RANGE_WIDTH + w_pro;
        x_pro = (w_pro-1)*3 + ProInfo.pro_range(1,1) - 1;
        y_pro = (h_pro-1)*3 + ProInfo.pro_range(2,1) - 1;
        z_wrd = last_depth_vec(pvec_idx);
        x_wrd = (x_pro - CalibMat.pro(1,3)) / CalibMat.pro(1,1) * z_wrd;
        y_wrd = (y_pro - CalibMat.pro(2,3)) / CalibMat.pro(2,2) * z_wrd;
        fprintf(fid_ori, '%.2f %.2f %.2f\n', x_wrd, y_wrd, z_wrd);
        z_wrd = last_depth_vec(pvec_idx) + delta_depth_vec(pvec_idx);
        x_wrd = (x_pro - CalibMat.pro(1,3)) / CalibMat.pro(1,1) * z_wrd;
        y_wrd = (y_pro - CalibMat.pro(2,3)) / CalibMat.pro(2,2) * z_wrd;
        fprintf(fid_res, '%.2f %.2f %.2f\n', x_wrd, y_wrd, z_wrd);
    end
end
fclose(fid_ori);
fclose(fid_res);

% for iter_idx = 1:20
%     % Set derv direction
%     pro_derv_vecmat = fun_ProjectedImageDerv(last_depth_mat, ...
%         color_table, ...
%         sigma_table, ...
%         CamInfo, ...
%         ProInfo, ...
%         EpiLine, ...
%         ParaSet);
%     minus_vec = (img_vec - cam_vec).*mask_vec;
%     pro_derv_vec = 2 * (minus_vec' * pro_derv_vecmat)';
%     grad_derv_vec = fun_GradVecDerv(last_depth_mat, ProInfo, ParaSet);
%     max_pro_val = max(abs(pro_derv_vec));
%     max_grad_val = max(abs(grad_derv_vec));
%     derv_vec =  pro_derv_vec / max_pro_val + theta * grad_derv_vec / max_grad_val;
% 
%     % Set new depth_mat
%     last_depth_vec = reshape(last_depth_mat', ...
%         ProInfo.RANGE_HEIGHT*ProInfo.RANGE_WIDTH, 1);
%     new_depth_vec = last_depth_vec - alpha * derv_vec;
%     new_depth_mat = reshape(new_depth_vec, ...
%         ProInfo.RANGE_WIDTH, ProInfo.RANGE_HEIGHT)';
% 
%     % Calculate error
%     [img_vec, mask_vec] = fun_ProjectedImage(new_depth_mat, ...
%         color_table, ...
%         sigma_table, ...
%         CamInfo, ...
%         ProInfo, ...
%         EpiLine, ...
%         ParaSet);
%     grad_vec = fun_GradVec(new_depth_mat, ProInfo, ParaSet);
%     img_mat = reshape(img_vec, ...
%         CamInfo.RANGE_WIDTH, CamInfo.RANGE_HEIGHT)';
%     mask_mat = reshape(mask_vec, ...
%         CamInfo.RANGE_WIDTH, CamInfo.RANGE_HEIGHT)';
%     error_value(iter_idx,1) = norm((img_vec - cam_vec).*mask_vec) + norm(grad_vec);
%     figure(1), imshow(img_mat, []);
%     fprintf('error=%.2f\n', error_value(iter_idx,1));
% 
%     % Save depth_mat and set last_depth_mat
%     iterative_mats{iter_idx,1} = new_depth_mat;
%     last_depth_mat = new_depth_mat;
% end




% [result_vec, mask_vec] = fun_ProjectedImage(now_depth_mat, ...
%     color_table, ...
%     sigma_table, ...
%     CamInfo, ...
%     ProInfo, ...
%     EpiLine, ...
%     ParaSet);
% result_mat = reshape(result_vec, CamInfo.RANGE_WIDTH, CamInfo.RANGE_HEIGHT)';
% tmp_mask = reshape(mask_vec, CamInfo.RANGE_WIDTH, CamInfo.RANGE_HEIGHT)';
%
% show_mat = zeros(CamInfo.RANGE_HEIGHT, CamInfo.RANGE_WIDTH, 3);
% show_mat(:, :, 1) = double(opt_mat) / 255;
% show_mat(:, :, 2) = show_mat(:, :, 1);
% show_mat(:, :, 3) = show_mat(:, :, 1);
% for h = 1:51
%     for w = 1:51
%         h_c = corres_mats{1,1}{h,w}(1,1) - CamInfo.cam_range(2,1) + 1;
%         w_c = corres_mats{1,1}{h,w}(1,2) - CamInfo.cam_range(1,1) + 1;
%         show_mat(h_c, w_c, :) = 0.0;
%         show_mat(h_c, w_c, 1) = 1.0;
%     end
% end
%
% result_mat = result_mat / 79 * 255;
% figure, imshow(uint8(result_mat), []);
% figure, imshow(uint8(cam_mats{1,1}.*tmp_mask));
% % figure, imshow(uint8(cam_mats{2,1}.*tmp_mask));
% error1 = norm(result_mat.*tmp_mask - cam_mats{1,1}.*tmp_mask);
% error2 = norm(result_mat.*tmp_mask - cam_mats{2,1}.*tmp_mask);

% fid = fopen('20.txt', 'wt');
% for h = 1:51
%     for w = 1:51
%         fprintf(fid, '%.2f %.2f %.2f\n', h*0.1, w*0.1, iterative_mats{20,1}(h,w));
%     end
% end
