%--------------------------------------------------------------------------
%   随机信号通道泄露
%   初始化
%--------------------------------------------------------------------------
% clear;clc;

%--------------------------------------------------------------------------
%   构造一个归一化的信号，信号的rms = 1
%--------------------------------------------------------------------------
fc = 4.650e09;
fs = 61.44e6;
bw = 20e6;
L = 1280;
T = L.*1/fs;
waveform = phased.FMCWWaveform('SweepTime',T,...
                               'SweepBandwidth',bw,...
                               'SampleRate',fs,...
                               'SweepDirection','Up',...
                               'SweepInterval','Symmetric');
sig1 = waveform();
%--------------------------------------------------------------------------
%   构造线性变化矩阵，进行通道混叠
%   通道2向通道1泄露-40dB信号过来
%--------------------------------------------------------------------------
% leak_power_dB = -100;                                                       %泄露能量
leak_Amp = db2mag(leak_power_dB);                                           %转换幅度
A = [1 leak_Amp;0 1];                                                       %构造线性变换矩阵 2->1 泄露

%--------------------------------------------------------------------------
%   加入高斯复噪声
%--------------------------------------------------------------------------
snr_scale = -50:5:100;                                                        %for循环范围
[var_out,rms_out] = deal(zeros(numel(snr_scale),1));                        %变量缓冲区
degree = zeros(1000,1);                                                    %变量缓冲区
jdx = 0;
for snr = snr_scale snr
    jdx = jdx + 1;                                                          %变量存储编号
    A_noise = 1/db2mag(snr);                                                %单位换算db->Amp

    parfor idx = 1:10000
        %------------------------------------------------------------------
        %   通道2 信号
        %------------------------------------------------------------------
        rand_degree = rand*360;
        sig2 = sig1.*exp(1j.*deg2rad(rand_degree));                          %信号相位差
        
        sig = [sig1 sig2] + ...
              A_noise.*[rt.randn_complex(L,1), rt.randn_complex(L,1)];       %加入归一化复噪声
          
        sig_out = (A*sig.').';                                              %线性变换搅和一下
        xcorr_data = sig_out(:,1)'*sig_out(:,2);                            %计算复相关
        degree(idx) = rad2deg(angle(xcorr_data))-rand_degree;               %保存角度值
    end
    %----------------------------------------------------------------------
    %   去掉初始相位后的缠绕修正
    %----------------------------------------------------------------------
    index = degree<-180;
    degree(index) = degree(index) + 360;
    %----------------------------------------------------------------------
    var_out(jdx) = var(degree);                                             %计算方差
    rms_out(jdx) = rms(degree);                                             %计算rms
end

eval(['save leak_power' num2str(leak_power_dB) 'dB snr_scale var_out rms_out'])

