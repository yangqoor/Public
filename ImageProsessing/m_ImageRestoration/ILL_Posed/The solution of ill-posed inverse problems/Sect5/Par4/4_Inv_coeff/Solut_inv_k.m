%    Solut_inv_k

% Решение нелинейной обратной задачи нахождения коэффициента теплопроводности k(u)
% в начально-краевой задаче:
% du/dt=d(k(u)du/dx)dx+f  u(1,t)=0, u(0,t)=0, u(x,0)=u0 
% с переопределением - u(x_0,t)=U00(t), заданным в трех точках x_0 (c.285).

% Решение прямой задачи методом прямых -- сведением УРЧП к системе ОДУ:
% => du/dt=k(u)u"+k'(u)(u')^2+f u(0,t)=0,
% => du/dt=k(u)[u(x-h,t)-2u(x,t)+u(x+h,t)]/h^2+k'(u){[u(x+h,t)-u(x,t)]/h}^2

% Методы решения обратной задачи:
%
% Режимы: 1) Метод регуляризации в W_2^1.
%         2) Решение на монотонных (re=1), выпуклых (re=2) или монотонных и выпуклых (re=3)
%            (см. mon_k) функциях.
%         3) Стабилизатор = вариация для k(u).
% По умолчанию установлен режим решения на монотонных и выпуклых функциях.

clear all
close all
if ~exist('fmincon');disp(' ');
  disp('  ВНИМАНИЕ! Демонстрация прерывается, т.к. на этой ЭВМ');
  disp('  не установлен компонент МАТЛАБа - Optimization Toolbox.');return;end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
FntNm='Arial Cyr';
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

disp(' ');disp(' Решение обратной задачи для нелинейного уравнения теплопроводности:');
disp(' нахождение коэффициента теплопроводности k(u) в начально-краевой задаче ');
disp('      du/dt=d(k(u)du/dx)dx+f  u(1,t)=0, u(0,t)=0, u(x,0)=u0');
disp(' по дополнительным измерениям температуры u(x_0,t)=U00(t) в трех точках x_0');
disp(' ');
disp('--------------------------------------------------------------------------------');
REZIM=3;re=3;
disp('          Режим по умолчанию - Решение на монотонных и выпуклых функциях');
disp(' ');kot1=input('  Установить новый режим работы? (да = 1/нет = 0): ');
disp('--------------------------------------------------------------------------------');
if kot1==1;disp(' ');disp(' Режимы:  1 - Метод регуляризации в W_2^1');
  disp('          2 - Метод регуляризации в V');
  disp('          31 - Решение на монотонных функциях');
  disp('          32 - Решение на выпуклых функциях');
  disp('          33 - Решение на монотонных и выпуклых функциях');disp(' ');
  kot2=input('  Какой режим? ');
  disp('--------------------------------------------------------------------------------');
  if kot2==1;REZIM=1;disp('          1 - Метод регуляризации в W_2^1');
  elseif kot2==2;REZIM=2;disp('          2 - Метод регуляризации в V');
  elseif kot2==31;REZIM=3;re=1;disp('          31 - Решение на монотонных функциях');
  elseif kot2==32;REZIM=3;re=2;disp('          32 - Решение на выпуклых функциях');
  elseif kot2==33;REZIM=3;re=3;
    disp('          33 - Решение на монотонных и выпуклых функциях');
 end;else
 disp('          Режим по умолчанию - Решение на монотонных и выпуклых функциях');
end
%disp(' ');
disp('--------------------------------------------------------------------------------');
uu=[0:0.02:1];ku=0.01+0.01*uu+0.1*uu.^2;
x=[0:0.05:1];h=x(2)-x(1);n=size(x,2);
T0=10;tt=[0.1:0.1:T0];ht=tt(2)-tt(1);
A=(diag(ones(1,n-1),-1)-2*diag(ones(1,n))+diag(ones(1,n-1),1))/h^2;
A(1,2)=0;A(2,1)=0;A(end-1,end)=0;A(end,end-1)=0;
B=(-diag(ones(1,n))+diag(ones(1,n-1),1))/h;
F=0.0*sqrt(tt);
%tic
u0=(x.*(1-x))';[T,U]=ode23('odu_ku',T0,u0,[],n,A,B,uu,ku,F,tt);
%toc
U00=interp1(T,U(:,[2 5 9]),tt);Um=max(U00(:,end));

delta=0.001;
disp(' ');disp(['    Ошибка данных = ' num2str(100*delta) ' % ']);disp(' ');
RN=randn(size(U00));U0=U00+delta*norm(U00)*RN/norm(RN);
figure(1);plot(tt,U0);xlabel('t');ylabel('u(x_i,t), i=2,5,9');
set(gca,'FontName',FntNm);
title(' Приближенные данные задачи')

disp(' ');disp(' Для начала решения задачи нажмите любую клавишу и подождите.');
pause
disp('--------------------------------------------------------------------------------');

%figure(2)plot(x,U(1:10:end,:));hold on;plot(x([2 5 9]),U0(1:10:end,:),'.');hold off
%figure(3);plot(T,U(:,1:2:end));figure(3);mesh(x,T,U);xlabel('x');ylabel('t')

options=optimset('Display','iter','MaxIter',7,'GradObj','off',...
   'LineSearchType','quadcubic','TolFun',1e-12,'TolCon',1e-12,'MaxFunEvals',4000000,...
   'TolX',1e-12);% 'iter'  'off'
ku0=0.01*ones(size(uu));LB=zeros(size(ku0));UB=0.02*ones(size(ku0));
warning off
for kit=1:5;
tic 
if REZIM==1;disp(' ');disp(' Стабилизатор = норма k(u) в W_2^1.');
   disp(' Параметр регуляризации предвычислен.');disp(' ');
  disp(['    ' num2str(options.MaxIter) ' итераций']);disp(' ')
  alf=2e-3;%  Требуется 2 цикла минимизации
   [zk,nev_min]=fminunc('odu_direct_k',ku0,options,n,x,A,B,uu,F,tt,U0,alf);
elseif REZIM==3;disp(' ');%disp(' Решение на классе монотонных и/или выпуклых функций.');disp(' ');
   disp(['    ' num2str(options.MaxIter) ' итераций']);disp(' ')
   alf=0;[zk,nev_min]=...
      fmincon('odu_direct_k',ku0,[],[],[],[],LB,UB,'mon_k',options,n,x,A,B,uu,F,tt,U0,alf,re);
else  disp(' ');disp(' Стабилизатор = вариация для k(u).');
   disp(' Параметр регуляризации предвычислен.');disp(' ');
  disp(['    ' num2str(options.MaxIter) ' итераций']);disp(' ')
  alf=2.5e-3;%  Требуется 2 цикла минимизации
   [zk,nev_min]=fminunc('odu_nev_k',ku0,options,n,x,A,B,uu,F,tt,U0,alf);  
end
% 
toc
u0=(x.*(1-x))';[T1,U1]=ode23('odu_ku',T0,u0,[],n,A,B,uu,zk,F,tt);
UU=interp1(T1,U1(:,[2 5 9]),tt);
u=uu(uu<=max(max(U1)));kkk=zk(uu<=max(max(U1)));kk=ku(uu<=max(max(U1)));
figure(2);plot(u,kk,'r',u,kkk,'.-');set(gca,'FontName',FntNm);
legend('Точное решение','Приближенное решение',2);xlabel('T');ylabel('k(T)')
title('Обратная задача нахождения коэффициента теплопроводности')

figure(1);plot(tt,U0,tt(1:2:end),UU(1:2:end,1:3),'.');
xlabel('t');ylabel('u(x_i,t), i=2,5,9');
set(gca,'FontName',FntNm);
title(' Переопределение (данные задачи): заданные (-) и вычисленные (.)')

Residual=norm(UU-U0)/norm(U0);
disp(['  Относительная невязка уравнения (L_2) = ' num2str(Residual)]);
Error=norm(kk-kkk)/norm(kk);
disp(['  Относительная ошибка решения (L_2) = ' num2str(Error)]);
disp(' ');disp('   Решение - на Figure 2.');
disp(' ');kot=input('  Продолжить минимизацию? (да = 1/нет = 0): ');
disp('--------------------------------------------------------------------------------');

if kot==0;disp(' ');disp(' Оптимизация окончена');disp(' ');return;
else ku0=zk;end
end
disp(' ');disp(' Оптимизация окончена');disp(' ');
disp('--------------------------------------------------------------------------------');
