<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MWArray</name>
    </assembly>
    <members>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWLogicalArray">
            <summary>
            <c>MWLogicalArray</c> is the managed representation of the MATLAB logical array. Like its MATLAB equivalent, 
            an <c>MWLogicalArray</c> contains only ones and zeros (true/false). 
            </summary>
            <remarks>
            As <c>MWLogicalArray</c> is derived from <c>MWIndexArray</c> it can be used in all MATLAB indexing operations.
            <newpara></newpara>    
            See LOGICAL ARRAY in the MATLAB documentation for a full description of this array type.
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWIndexArray">
            <summary>
            <c>MWIndexArray</c> is an abstract class that serves as the root for the <c>MWArray</c> indexing 
            classes. These classes, represent array types that can be used as input parameters to the array 
            indexing operator []. 
            </summary>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWArray">
            <summary>
            <c>MWArray</c> is an abstract class that serves as the root of the MATLAB array class hierarchy.  
            It encapsulates a native MATLAB <c>mxArray</c> and provides a managed API for accessing, formatting,
            and manipulating the native array.
            </summary>
            <Remarks>
            <c>MWArray</c> and its derived types support the <c>ICloneable</c>, <c>ISerializable</c>, and <c>IDisposable</c> interfaces.  
            They provide implicit conversion to and from native .NET types to the appropriate MATLAB array type.
            They also provide type specific indexing based on the indexing available for the corresponding MATLAB array type.
            </Remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mclmcrInitialize">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxCreateString(System.IntPtr)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxDeserialize(System.IntPtr,System.Int32)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxDuplicateArray(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxFree(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetClassID(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetData(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetDimensions(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetElementSize(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetM(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetN(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetNumberOfDimensions(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetNumberOfElements(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxGetScalar(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxIsA(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.String)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxIsCell(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxIsChar(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxIsEmpty(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxIsLogical(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxIsNumeric(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxIsSparse(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxIsStruct(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mxSerialize(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.array_handle_get_int(System.IntPtr,System.IntPtr,System.IntPtr[])">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mclArrayHandle2mxArray(MathWorks.MATLAB.NET.Utility.MWSafeHandle@,System.IntPtr)">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mclcppArrayToString(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.String@)">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mclIsIdentical(MathWorks.MATLAB.NET.Utility.MWSafeHandle,MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mclmxArray2ArrayHandle(System.IntPtr@,System.IntPtr)">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.array_handle_set(System.IntPtr,System.IntPtr)">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.array_handle_set_logical(System.IntPtr,MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.IntPtr)">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mclMXArrayGet(MathWorks.MATLAB.NET.Utility.MWSafeHandle@,MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.IntPtr,System.IntPtr[])">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mclMXArraySet(MathWorks.MATLAB.NET.Utility.MWSafeHandle,MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.IntPtr,System.IntPtr[])">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.mclMXArraySetLogical(MathWorks.MATLAB.NET.Utility.MWSafeHandle,MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.IntPtr,System.IntPtr[])">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.ut_hash_pointer(System.Int32,MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.#cctor">
            <summary internal= "true">
            This is a static constructor called only by the runtime at initialization. 
            </summary>
            <remarks>
            This constructor must be called before any other static initializers, 
            therefore, no static field should be used in this class.	  
            </remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.#ctor">
            <summary internal= "true">
            Internal default constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.#ctor(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal Constructor
            </summary>
            <param name="pMXArray">Pointer to a native mxArray</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.DisposeArray(System.Object)">
            <summary>
            This dispose method recursively frees the resources of the <c>MWArray</c> instances contained 
            in the <c>Object</c> argument.  
            </summary>
            <remarks>
            If the object implements the IDisposable interface, it is freed by calling its Dispose 
            method. If the object represents an array of objects that implement the IDisposable 
            interface, each object in the array is freed via the dispose method.  Finally, if the 
            object represents a multi-dimensional array, the array is recursively processed to free 
            each object contained in the array.
            </remarks>
            <param name="_object">The object to dispose</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.Dispose">
            <summary>
            Releases resources of the <c>MWArray</c> and the native mxArray that it encapsulates.
            </summary>
            <remarks>
            This method allows for the explicit lifecycle control of an <c>MWArray</c> and its native MATLAB array.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MathWorks.MATLAB.NET.Arrays.MWArray.Dispose(System.Boolean)" -->
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.op_Implicit(System.Double)~MathWorks.MATLAB.NET.Arrays.MWArray">
            <summary>
            Implicit cast from a native double scalar value to an <c>MWNumericArray</c>.
            </summary>
            <param name="scalar">A double scalar value.</param>
            <returns>A scalar <c>MWNumericArray</c> representing the double value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.op_Implicit(System.String)~MathWorks.MATLAB.NET.Arrays.MWArray">
            <summary>
            Implicit cast from a native character string to an <c>MWCharArray</c>.
            </summary>
            <param name="value">A character string.</param>
            <returns>An <c>MWCharArray</c> representing the string value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary internal= "true">
            Internal deserialization constructor.
            </summary>
            <remarks>
            The arguments for this constructor are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="serializationInfo">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization function.
            </summary>
            <remarks>
            The arguments for this function are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="info">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.GetTypedArray(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function - Returns a derived type of <c>MWArray</c> with the same type as the contained MATLAB array
            </summary>
            <param name="hMXArray">A pointer to a native MATLAB array</param>
            <returns>A properly typed MWArray</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.ConvertObjectToMWArray(System.Object)">
            <summary>
            Internal function - Returns a derived type of <c>MWArray</c> depending on the contents of input object
            </summary>
            <param name="objIn"></param>       
            <returns></returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.SetMXArray(MathWorks.MATLAB.NET.Utility.MWSafeHandle,MathWorks.MATLAB.NET.Arrays.MWArrayType,System.Int32,System.Int32[])">
            <summary internal= "true">
            This method initializes the MWArray with the native mxArray that it encapsulates.
            It also updates the unmanaged memory allocation for the garbage collector.
            </summary>
            <param name="hMXArray">A safe pointer to a native mxArray</param>
            <param name="arrayType">The MATLAB array type</param>
            <param name="numDimensions">The number of MATLAB array dimensions</param>
            <param name="dimensions">The array dimensions</param>
            <returns>The safe pointer to the native mxArray</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.SetMXArray(MathWorks.MATLAB.NET.Utility.MWSafeHandle,MathWorks.MATLAB.NET.Arrays.MWArrayType,System.Int32,System.Int32[],System.Boolean)">
            <summary internal= "true">
            This method initializes the MWArray with the native mxArray that it encapsulates.
            It also updates the unmanaged memory allocation for the garbage collector.
            </summary>
            <param name="hMXArray">A safe pointer to a native mxArray</param>
            <param name="arrayType">The MATLAB array type</param>
            <param name="numDimensions">The number of MATLAB array dimensions</param>
            <param name="dimensions">The array dimensions</param>
            <param name="isComplex">The array complexity</param>
            <returns>The safe pointer to the native mxArray</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.SetMXArray(MathWorks.MATLAB.NET.Utility.MWSafeHandle,MathWorks.MATLAB.NET.Arrays.MWArrayType)">
            <summary internal= "true">
            This method initializes the MWArray with the native mxArray that it encapsulates.
            It also updates the unmanaged memory allocation for the garbage collector.
            </summary>
            <param name="hMXArray">A safe pointer to an mxArray</param>
            <param name="arrayType">The MATLAB array type</param>
            <returns>A safe pointer to the native mxArray handle</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.CheckDisposed">
            <summary internal= "true">
            Internal - Checks for an invalid MXArray handle.
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.DestroyMXArray">
            <summary internal= "true">
            This method frees the native memory allocated for the contained mxArray and 
            updates the unmanaged memory allocation for the garbage collector.
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.DetachMXArray">
            <summary internal= "true">
            Detatches the contained mxArray 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.ArrayIndexer(MathWorks.MATLAB.NET.Arrays.MWArray,System.Int32[])">
            <summary internal= "true">
            Integer ArrayIndexer : Get
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.ArrayIndexer(MathWorks.MATLAB.NET.Arrays.MWArray,MathWorks.MATLAB.NET.Arrays.MWArray,System.Int32[])">
            <summary internal= "true">
            Integer ArrayIndexer : Set 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.Equals(System.Object)">
            <summary>
            Compares two <c>MWArray</c> instances for equality (as defined by mxIsIdentical).
            </summary>
            <param name="obj">An <c>MWArray</c> referenced as an <c>Object</c> type.</param>
            <returns>true if the arrays are equal.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.GetHashCode">
            <summary>
            Returns the hashcode of the <c>MWArray</c>.
            </summary>
            <returns>The hashcode for the <c>MWArray</c></returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.ToString">
            <summary>
            Returns a formatted string representing the contents of the <c>MWArray</c>
            </summary>
            <returns>The formatted <c>MWArray</c> string</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.Clone">
            <summary>
            Makes a deep copy of an <c>MWArray</c>.
            </summary>
            <remarks>
            See the "=" operator in the MATLAB documentation.
            </remarks>
            <returns>The deep copy of the <c>MWArray</c></returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.ToArray">
            <summary>
            Returns a native .NET array containing a copy of data in the underlying 
            MATLAB array. 
            </summary>
            <remarks>
            The returned array has the same dimensionality as the underlying 
            MATLAB array. The elements of the returned array are converted according to 
            default conversion rules. If the underlying MATLAB array is a complex numeric 
            type, toArray throws an exception. If the underlying array is sparse, a full 
            representation of the array is returned. Care should be taken when calling toArray 
            on a sparse array with large row and column dimensions, as this action may exhaust 
            system memory. If the underlying array is a cell or struct array, toArray is 
            recursively called on each cell.
            </remarks>
            <returns>A native .NET array with the same dimensionality as the original MWArray</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWArray.GetNextSubscript(System.Int32[],System.Int32[],System.Int32)">
            <summary internal= "true">
            This recursive method take an array subscript and returns the next subscript in row major order. 
            </summary>
            <param name="dimensions">The dimensions of the array</param>
            <param name="subscripts">The array subscripts</param>
            <param name="index">The index of the current subscript (always 0 for external caller)</param>
            <returns>A native integer array of subscripts</returns>
            <exclude/>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.nativeGCEnabled">
            <summary>
            Private static member variable - native GC enabled flag (default: true)
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.nativeGCBlockSize">
            <summary>
            Private static member variable - native memory pressure block size (default: 1Meg. bytes)
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.resourceManager">
            <summary internal= "true">
            Internal static member variable - array resource manager
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.formattedOutputString">
            <summary internal= "true">
            Internal static member variable - Formatted output string
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.mxSync">
            <summary internal= "true">
            Internal static member variable - Thread sync object
            <remarks>
            A single synchronization object must be used by the MCR and the <c>MWArray</c> classes when 
            the <c>MWMCR</c> singleton is running in local mode.  When called remotely, a new sync object
            will be marshaled to or from the server to be used exclusively by the client.
            </remarks>
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray._hMXArray">
            <summary internal= "true">
            Internal member variable - mxArray pointer
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.array_Type">
            <summary internal= "true">
            Internal member variable - MATLAB Builder array type
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.NumElements">
            <summary internal= "true">
            Internal member variable - number of array elements
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.ElementSize">
            <summary internal= "true">
            Internal member variable - size of array element
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.Item(System.Int32[])">
            <summary>
            Generic MATLAB array indexer returning the result as an <c>MWArray</c>
            </summary>
            <remarks>
            An index can be any number of integers corresponding to the array's dimensions.  As with MATLAB, 
            a single index will return the nth element in the array.
            <newpara></newpara> 
            NOTE: The generic array indexer supports numeric, logical, char, and cell array types.  
            For complex numeric arrays, both the real and the imaginary components are returned.
            ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="indices">Array of integers corresponding to an array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.NativeGCEnabled">
            <summary>
            Static property representing the native array GC enabled flag.
            </summary>
            <remarks>
            If the native array GC is enabled, a CLR garbage collection will take place transparently as required 
            to remove instances of the <c>MWArray</c> class or one of its derived types that are no longer
            being referenced.  This includes unmanaged memory allocated through explicit creation of <c>MWArray</c> 
            types, as well as implicit instantiation of an <c>MWArray</c> via an implicit cast.  
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.NativeGCBlockSize">
            <summary>
            Static property representing the unmanaged memory block size in bytes. 
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.ArrayType">
            <summary>
            Read only property returning the derived type of the <c>MWArray</c> 
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.Dimensions">
            <summary>
            Read only property returning a native integer array containing the size of each dimension of the <c>MWArray</c>.
            </summary>
            <remarks>
            See Size function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.IsDisposed">
            <summary>
            Read only property returning the handle status of the encapsulated <c>MWArray</c>
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.IsEmpty">
            <summary>
            Returns true if the <c>MWArray</c> is empty.
            </summary>
            <remarks>
            See ISEMPTY function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.IsCellArray">
            <summary>
            Returns "true" for an <c>MWCellArray</c>.
            </summary>
            <remarks>
            See ISCELL function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.IsCharArray">
            <summary>
            Returns true for an <c>MWCharArray</c>.
            </summary>
            <remarks>
            See ISCHAR function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.IsLogicalArray">
            <summary>
            Returns true for an <c>MWLogicalArray</c>.
            </summary>
            <remarks>
            See ISLOGICAL function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.IsNumericArray">
            <summary>
            Returns true for an <c>MWNumericArray</c>.
            </summary>
            <remarks>
            See ISNUMERIC function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.IsStructArray">
            <summary>
            Returns true for an <c>MWStructArray</c>.
            </summary>
            <remarks>
            See ISSTRUCT function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.NumberofDimensions">
            <summary>
            Read only property returning the number of dimensions in the <c>MWArray</c>.
            </summary>
            <remarks>
            See NDIMS function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.NumberOfElements">
            <summary>
            Read only property returning the number of elements in the <c>MWArray</c>.
            </summary>
            <remarks>
            Equivalent to prod(size(A)) for non-empty arrays.  See NUMEL function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.MXArrayHandle">
            <summary>
            Internal, readOnly property containing a pointer to the encapsulated native mxArray.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABType">
            <summary internal= "true">
            Internal, read only property returning the array type of the encapsulated MATLAB array
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType">
            <summary internal= "true">
            Internal MATLAB array type enumeration.  
            </summary>
            <remarks>
            The order is defined by MATLAB.
            </remarks>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Unknown">
            <summary>
            Unknown array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Cell">
            <summary>
            Cell array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Struct">
            <summary>
            Struct array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Logical">
            <summary>
            Logical array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Char">
            <summary>
            Char array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Index">
            <summary>
            Index array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Double">
            <summary>
            Double array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Single">
            <summary>
            Single array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Int8">
            <summary>
            INT8 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.UInt8">
            <summary>
            UInt8 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Int16">
            <summary>
            Int16 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.UInt16">
            <summary>
            UInt16 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Int32">
            <summary>
            Int32 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.UInt32">
            <summary>
            UInt32 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Int64">
            <summary>
            Int64 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.UInt64">
            <summary>
            UINT64 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Function">
            <summary>
            Function array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Opaque">
            <summary>
            Opaque array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType.Object">
            <summary>
            Object array type.
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.mxCreateDoubleScalar(System.Double)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.mxGetNzmax(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.mclMXArrayGetIndexArrays(MathWorks.MATLAB.NET.Utility.MWSafeHandle@,MathWorks.MATLAB.NET.Utility.MWSafeHandle@,MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.#ctor(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.#ctor">
            <summary internal= "true">
            Internal default constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.#ctor(System.Double)">
            <summary internal= "true">
            Internal Constructor - Builds an index array from a scalar.
            </summary>
            <param name="scalar">A scalar value representing an indexing subscript.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.#ctor(System.Double,System.Double)">
            <summary internal= "true">
            Internal Constructor
            </summary>
            <remarks>
            This internal constructor is used to build a ramp using an "end" indexer. 
            This constructor is required as the end value of the ramp cannot be 
            determined until it is associated with a specific array.
            <newpara></newpara>
            NOTE: The new instance does not encapsulate a native MATLAB array
            </remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal Dispose function
            </summary>
            <param name="disposing">Client explicit dispose flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.op_Implicit(System.Int32)~MathWorks.MATLAB.NET.Arrays.MWIndexArray">
            <summary>
            Implicit cast from an integer to a MATLAB index array.
            </summary>
            <param name="scalar">The scalar value.</param>
            <returns>An <c>MWIndexArray</c> representing the scalar value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.op_Implicit(System.Byte[])~MathWorks.MATLAB.NET.Arrays.MWIndexArray">
            <summary>
            Implicit cast from a native byte array to a MATLAB index array.
            </summary>
            <param name="array">A byte array of subscripts.</param>
            <returns>An <c>MWIndexArray</c> containing the specified subscripts.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.op_Implicit(System.Int16[])~MathWorks.MATLAB.NET.Arrays.MWIndexArray">
            <summary>
            Implicit cast from a native short array to a MATLAB index array.
            </summary>
            <param name="array">A short array of subscripts.</param>
            <returns>An <c>MWIndexArray</c> containing the specified subscripts.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.op_Implicit(System.Int32[])~MathWorks.MATLAB.NET.Arrays.MWIndexArray">
            <summary>
            Implicit cast from a native integer array to a MATLAB index array.
            </summary>
            <param name="array">An integer array of subscripts.</param>
            <returns>An <c>MWIndexArray</c> containing the specified subscripts.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.op_Implicit(System.Int64[])~MathWorks.MATLAB.NET.Arrays.MWIndexArray">
            <summary>
            Implicit cast from a native long array to a MATLAB index array.
            </summary>
            <param name="array">A long array of subscripts.</param>
            <returns>An <c>MWIndexArray</c> containing the specified subscripts.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary internal= "true">
            Internal deserialization constructor.
            </summary>
            <remarks>
            The arguments for this constructor are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="serializationInfo">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.Clone">
            <summary>
            Makes a deep copy of a MATLAB index array.
            </summary>
            <remarks>
            See MATLAB documentation for the "=" operator.
            </remarks>
            <returns>The copy of the index array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.GetHashCode">
            <summary>
            Returns the hashcode for the specified MATLAB index array
            </summary>
            <returns>The hashcode for the index array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.ToString">
            <summary>
            Returns a native string representing the MATLAB index array
            </summary>
            <returns>A formatted string representing the index array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWIndexArray.Equals(System.Object)">
            <summary>
            Compares two MATLAB index arrays for equality.
            </summary>
            <param name="obj">An index array referenced as an Object type.</param>
            <returns>The result of the comparison for equality</returns>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWIndexArray._Empty">
            <summary internal= "true">
            Internal static member variable - Empty array
            </summary>
            <remarks>
            **** THIS INITIALIZER MUST COME FIRST ****
            </remarks>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWIndexArray.TypeFieldName">
            <summary internal= "true">
            Internal static member variable - Indexing constant
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWIndexArray.SubsFieldName">
            <summary internal= "true">
            Internal static member variable - Indexing constant
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWIndexArray.ArrayIndex">
            <summary internal= "true">
            Internal static member variable - Indexing constant
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWIndexArray.CellIndex">
            <summary internal= "true">
            Internal static member variable - Indexing constant
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWIndexArray.ColonIndexer">
            <summary internal= "true">
            This field represents the MATLAB ":" indexing operator.
            </summary>
            
            <summary internal= "true">
            Internal static member variable - The MATLAB ":" indexing operator.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWIndexArray.start">
            <summary internal= "true">
            Internal member variable - Ramp start value
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWIndexArray.step">
            <summary internal= "true">
            Internal member variable - Ramp step value
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWIndexArray.IsSparse">
            <summary>
            Returns true if the array is a sparse array.
            </summary>
            <remarks>
            See ISSparse function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWIndexArray.NonZeroMaxStorage">
            <summary>
            Returns the number of storage locations allocated for the nonzero elements of a sparse matrix.
            </summary>
            <remarks>
            For a full matrix, NZMAX(S) is equivalent to prod(size(S)).  See NZMAX function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.mxCreateLogicalArray(System.Int32,System.Int32[])">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.mxCreateLogicalScalar(System.Byte)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.mxCreateLogicalMatrix(System.Int32,System.Int32)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.mxIsLogicalScalarTrue(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.mclGetLogicalSparse(System.IntPtr@,System.IntPtr,System.IntPtr[],System.IntPtr,System.IntPtr[],System.IntPtr,System.Byte[],System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor">
            <overloads>
             <summary>
             MATLAB logical array constructors.
             </summary>
             </overloads>
             <summary>
             Creates an empty logical array
             </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an empty m-by-n logical array.
            </summary>
            <param name="row">The number of rows in the array</param>
            <param name="column">The number of columns in the array</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor(System.Int32[])">
            <summary>
            Creates an m-by-n-by-p-by-... empty logical array.
            </summary>
            <remarks>
            If only one dimension is specified, an empty n-by-n logical array is created.
            </remarks>
            <param name="dimensions">A variable number of array dimensions.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor(System.Boolean)">
            <summary>
            Creates a logical scalar array representing the specified boolean value.
            </summary>
            <param name="logicalValue">A boolean value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor(System.Int32,System.Int32,System.Boolean[])">
            <summary>
            Constructs an m-by-n logical array initialized to the values contained in a native boolean array.
            </summary>
            <remarks>
            The logical array is initialized in row major order from the values contained in the boolean vector.
            The number of elements in the vector array must match the number of elements in the newly created 
            logical array (rows * columns).
            </remarks>
            <param name="rows">The number of rows in the logical array</param>
            <param name="columns">The number of columns in the logical array</param>
            <param name="boolArray">A native vector of boolean values</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor(System.Int32,System.Int32,System.Boolean[],System.Boolean)">
            <summary>
            Constructs an m-by-n logical array initialized to the values contained in a native boolean array.
            </summary>
            <remarks>
            The logical array is initialized in the specified order from the values contained in the boolean array.
            The number of elements in the array must match the number of elements in the newly created 
            logical array (rows * columns).
            </remarks>
            <param name="rows">The number of rows in the logical array</param>
            <param name="columns">The number of columns in the logical array</param>
            <param name="boolArray">A native vector of boolean values</param>
            <param name="columnMajorOrder">A boolean flag - true if the logical array should be initialized in column major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor(System.Array)">
            <summary>
            Constructs an  m-by-n-by-p-by-... logical array from a native array of boolean values.
            </summary>
            <remarks>
            The logical array will have the same dimensions and values as the native array.
            <newpara></newpara> 
            NOTE: As MATLAB arrays must have at least two dimensions, a single dimension native array 
            will result in the creation of a two dimensional logical array having a single row.
            </remarks>
            <param name="boolArray">A native boolean array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
            <param name="disposing">Client explicit dispose flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.op_Implicit(MathWorks.MATLAB.NET.Arrays.MWLogicalArray)~System.Boolean">
            <summary>
            Implicit cast from an <c>MWLogicalArray</c> to a boolean value.
            </summary>
            <remarks>
            This cast returns true when all of the elements in the logical array are true.
            </remarks>
            <param name="logicalArray">A logical MATLAB array.</param>
            <returns>A boolean value representing the logical state of the array.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.op_Implicit(System.Boolean)~MathWorks.MATLAB.NET.Arrays.MWLogicalArray">
            <summary>
            Implicit cast from a native boolean scalar to an <c>MWLogicalArray</c>.
            </summary>
            <remarks>
            This cast creates a 1x1 <c>MWLogicalArray</c>.
            </remarks>
            <param name="scalar">A native boolean value.</param>
            <returns>A single element <c>MWLogicalArray</c> representing the scalar value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary internal= "true">
            Internal deserialization constructor.
            </summary>
            <remarks>
            The arguments for this constructor are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="serializationInfo">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.MakeSparse(System.Int32,System.Int32,System.Int32)">
            <overloads>
             <summary>
             Constructs a sparse logical matrix.
             </summary>
             </overloads>
             <summary>
             Constructs a sparse logical matrix with the specified rows and columns and storage for
             the specified number of non-zero elements.
             </summary>
             <param name="rows">Number of rows in the sparse matrix</param>
             <param name="columns">Number of columns in the sparse matrix</param>
             <param name="nonZeroMax">Maximum number of nonzero elements in the sparse matrix</param>
             <returns>The sparse logical matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.MakeSparse(System.Int32[],System.Int32[],System.Boolean[])">
            <summary>
            Constructs a logical sparse matrix with the number of rows= max{rowIndex(k)} and the number of 
            columns= max{colIndex(k)}.  It initializes the array with the supplied data.
            The maximum number of nonzero elements is equal to the length of the data array. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= dataArray(k). 
            </remarks>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based row indices</param>
            <param name="dataArray">The logical data array for the sparse matrix</param>
            <returns>The sparse logical matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.MakeSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Boolean[])">
            <summary>
            Constructs a logical sparse matrix with the specified number of rows and columns.  
            It initializes the array with the supplied data. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= dataArray(k).  
            </remarks>
            <param name="rows">Number of rows in the sparse matrix</param>
            <param name="columns">Number of columns in the sparse matrix</param>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based column indices</param>
            <param name="dataArray">The logical data array for the sparse matrix</param>
            <returns>The sparse logical matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.MakeSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Boolean[],System.Int32)">
            <summary>
            Constructs a logical sparse matrix with the specified number of rows and columns and
            maximum nonzero elements.  It initializes the array with the supplied data. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= dataArray(k). 
            </remarks>
            <param name="rows">Number of rows in the sparse matrix</param>
            <param name="columns">Number of columns in the sparse matrix</param>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based column indices</param>
            <param name="dataArray">The logical data array for the sparse matrix</param>
            <param name="nonZeroMax">Maximum number of nonzero elements in the sparse matrix</param>
            <returns>The sparse numeric matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.ToString">
            <summary>
            Returns a string representing the logical array.
            </summary>
            <returns>A formatted string representing the logical array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.Equals(System.Object)">
            <summary>
            Compares two logical arrays for equality returning a boolean value.
            </summary>
            <param name="obj">A logical array referenced as an Object type.</param>
            <returns>The result of the comparison for equality</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.Clone">
            <summary>
            Makes a deep copy of a logical array
            </summary>
            <remarks>
            See MATLAB documentation for the "=" operator.
            </remarks>
            <returns>The copy of the <c>MWLogicalArray</c></returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.GetHashCode">
            <summary>
            Returns the hashcode for the logical array
            </summary>
            <returns>The hashcode for the logical array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.ToVector">
            <summary>
            Returns a copy of the elements in the logical array as a one dimension native boolean array
            </summary>
            <remarks>
            The data is returned as a native array in the standard MATLAB column major order not the 
            C# row major order. 
            </remarks>
            <returns>A vector containing the elements of the logical array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.ToArray">
            <summary>
            Converts the <c>MWLogicalArray</c> into a native boolean array with the same dimensions and values as the 
            logical array. 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.CreateLogicalArray(System.Int32,System.Int32,System.Boolean[],System.Boolean)">
            <summary internal= "true">
            Internal method - Creates an m-by-n logical array initialized to the values contained in the boolean array.
            </summary>
            <param name="rows">The number of rows in the logical array</param>
            <param name="columns">The number of columns in the logical array</param>
            <param name="boolArray">A boolean array containing the initialization data for the logical array.</param>
            <param name="columnMajorData">A boolean flag indicating if data in boolArray is in the MATLAB column major order.</param>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWLogicalArray._Empty">
            <summary internal= "true">
            Internal static member variable - Empty array
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.Item(System.Int32[])">
            <summary>
            The MATLAB logical array indexer
            </summary>
            <remarks>
            An index can be any number of integers corresponding to the array's dimensions.  As with MATLAB, 
            a single index will return the nth element in the array.
            <newpara></newpara> 
            NOTE: ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="indices">Array of integers corresponding to an array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.Empty">
            <summary>
            Read only property returning a writeable version of an empty MWLogicalArray.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWLogicalArray.IsScalar">
            <summary>
            Returns true if the array is a logical scalar.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.MWMCR">
            <summary>
            The <c>MWMCR</c> (MATLAB Compiler Runtime) class is a stateless component that wraps an unmanaged mcrInstance 
            and provides a managed API for instantiating, initializing, and terminating the MCR.
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclFeval(System.IntPtr,System.String,System.Int32,System.IntPtr[],System.Int32,System.IntPtr[])">
            <summary internal= "true">
            Internal function - Calls MCR "feval" function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclGetDotNetComponentType">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclGetLastErrorMessage">
            <summary internal= "true">
            Internal function - Gets the last error message.
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclGetMCCTargetType(System.Byte)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclInhibitShutdown">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclInitializeApplication(System.String[],System.IntPtr)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclInitializeComponentInstanceNonEmbeddedStandalone(System.IntPtr@,System.String,System.String,System.Int32,System.IntPtr,System.IntPtr)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclInitializeComponentInstanceWithCallbk(System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr,System.Int64)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclmcrInitialize">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclTerminateApplication">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclTerminateInstance(System.IntPtr@)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclWaitForFiguresToDie(System.IntPtr)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclGetStackTrace(System.IntPtr@)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclFreeStackTrace(System.IntPtr@,System.Int32)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclGetTempFileName(System.String)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclIsMCRInitialized">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclIsJVMEnabled">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclGetLogFileName">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.mclIsNoDisplaySet">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            MCR constructor
            </summary>
            <remarks>
            Note:  THIS CONSTRUCTOR SHOULD ONLY BE REFERENCED FROM COMPILER GENERATED CODE.
            </remarks>
            <exclude/>
            <param name="componentName">The component name</param>
            <param name="componentPath">The directory containing the component assembly</param>
            <param name="isLibrary">Library/Executable target flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.#ctor(System.String,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            MCR constructor
            </summary>
            <remarks>
            Note:  THIS CONSTRUCTOR SHOULD ONLY BE REFERENCED FROM COMPILER GENERATED CODE.
            </remarks>
            <exclude/>
            <param name="componentId">The component guid</param>
            <param name="componentPath">The directory containing the component assembly</param>
            <param name="embeddedCtfStream">The CTF stream embedding in the component assembly</param>
            <param name="isLibrary">Library/Executable target flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.Finalize">
            <summary internal= "true">
            Internal destructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.Dispose">
            <summary>
            Disposes the <c>MWMCR</c> object and the native mcr instance that it encapsulates.
            </summary>
            <remarks>
            This method allows for the explicit lifecycle control of a native MCR instance.
            </remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.InitializeApplication(System.String[])">
            <summary>
            This method initializes the first instantiation of the MCR with the user specified set of startup options.
            </summary>
            <remarks>
            This method is used to override the MCR global default startup options.  It is optional and MUST only 
            be called once before any other MCR instance is initialized.
            <newpara></newpara>
            Note: The startup options passed to this method apply to all subsequent instances of the MCR and cannot be 
            changed by them.
            </remarks>
            <param name="startupOptions">A string array of MCR startup options.</param>
            <returns>Returns the MCR application initialization status.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.TerminateApplication">
            <summary>
            This method terminates an MCR application.
            </summary>
            <remarks>
            No MCR instance or method should be accessed in any way after calling this method.
            </remarks>
            <returns>true for success.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.WaitForFiguresToDie">
            <summary>
            This method will not return until all the figure windows associated with this 
            component have been closed.  
            </summary>>
            <remarks>
            Note:  THIS METHOD SHOULD ONLY BE REFERENCED FROM COMPILER GENERATED CODE.
            </remarks>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.setBuilderUserData">
            <summary>
            This method sets the builder userdata flag to be net so in any m 
              code we can check this variable and make decisions based on the 
            builder we are currently in.  
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.EvaluateFunction(System.String,System.Int32,System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[])">
            <summary internal= "true">
            This is the common implementation routine for the "EvaluateFunction" methods.
            </summary>
            <param name="functionName">The name of the MATLAB function to evaluate.</param>
            <param name="numArgsOut">The number of requested output arguments.</param>
            <param name="numArgsIn">The number of input arguments.</param>
            <param name="argsIn">An array of MATLAB array input arguments.</param>
            <returns>An array of MATLAB arrays containing the output arguments returned by the function.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.UnpackArgArray(System.Object[])">
            <summary internal= "true">
            Unpacks an argument array consisting of zero or more explicit arguments and optionally ending with a
            a varagin array of arguments.
            </summary>
            <param name="argArray">The raw argument array</param>
            <returns>The unpacked argument array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.EvaluateFunction(System.String,System.Object[])">
            <overloads>
             <summary>
             These methods provide a managed API for the MCR "feval" method.  
             </summary>summary>
             <remarks>
             Note:  THESE METHODS SHOULD ONLY BE REFERENCED FROM COMPILER GENERATED CODE.
             </remarks>
             </overloads>
             <summary>
             This method uses the MCR to evaluate a varargin MATLAB function and returns a single result.
             </summary>
             <remarks>
             If the method fails, it throws an exception containing the message returned by the 
             LastErrorMessage property.
             </remarks>
             <exclude/>
             <param name="functionName">The name of the MATLAB function to evaluate.</param>
             <param name="argsIn">MATLAB array input arguments optionally ending with an MWArray[] varargin array.</param>
             <returns>A single MATLAB array output argument returned by the function.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.EvaluateFunction(System.String,MathWorks.MATLAB.NET.Arrays.MWArray[])">
            <summary>
            This method accesses the MCR to evaluate a MATLAB function.
            </summary>
            <remarks>
            If the method fails, it throws an exception containing the message returned by the 
            LastErrorMessage property.
            </remarks>
            <exclude/>
            <param name="functionName">The name of the MATLAB function to evaluate.</param>
            <param name="argsIn">A variable number of MATLAB array input arguments.</param>
            <returns>A single MATLAB array output argument returned by the function.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.EvaluateFunction(System.String,System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[])">
            <summary>
            This method accesses the MCR to evaluate a MATLAB function.
            </summary>
            <remarks>
            If the method fails, it throws an exception containing the message returned by the 
            LastErrorMessage property.
            </remarks>
            <exclude/>
            <param name="functionName">The name of the MATLAB function to evaluate.</param>
            <param name="numArgsOut">The number of output arguments to return.</param>
            <param name="argsIn">An array of MATLAB array input arguments.</param>
            <returns>An array of MATLAB arrays containing the output arguments returned by the function.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.EvaluateFunction(System.Int32,System.String,MathWorks.MATLAB.NET.Arrays.MWArray[])">
            <summary>
            This method accesses the MCR to evaluate a MATLAB function.
            </summary>
            <remarks>
            If the method fails, it throws an exception containing the message returned by the 
            LastErrorMessage property.
            </remarks>
            <exclude/>
            <param name="numArgsOut">The number of output arguments to return.</param>
            <param name="functionName">The name of the MATLAB function to evaluate.</param>
            <param name="argsIn">A variable number of MATLAB array input arguments.</param>
            <returns>An array of MATLAB arrays containing the output arguments returned by the function.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.EvaluateFunction(System.Int32,System.String,System.Object[])">
            <summary>
            This method accesses the MCR to evaluate a varargin MATLAB function.
            </summary>
            <remarks>
            If the method fails, it throws an exception containing the message returned by the 
            LastErrorMessage property.
            </remarks>
            <exclude/>
            <param name="numArgsOut">The number of output arguments to return.</param>
            <param name="functionName">The name of the MATLAB function to evaluate.</param>
            <param name="argsIn">MATLAB array input arguments optionally ending with an MWArray[] varargin array.</param>
            <returns>An array of MATLAB arrays containing the output arguments returned by the function.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.EvaluateFunction(System.String,System.Int32,MathWorks.MATLAB.NET.Arrays.MWArray[]@,MathWorks.MATLAB.NET.Arrays.MWArray[])">
            <summary>
            This method accesses the MCR to evaluate a MATLAB function and return the outputs to an  
            argument array. 
            </summary>
            <exclude/>
            <param name="functionName">The name of the MATLAB function to evaluate</param>
            <param name="numArgsOut">The number of output arguments to return</param>
            <param name="argsOut">An array of MWArrays into which the function outputs are copied</param>
            <param name="argsIn">An array of input arguments</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.GetMCRLogFileName">
            <summary>
            This function should be used to get the logfile name that is being used by MCR
            </summary>
            <returns>Returns the name of the logfile.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.IsMCRInitialized">
            <summary>
            This function should be used to verify if MCR is already initialized       
            </summary>
            <returns>Returns true if MCR is already initialized else returns false</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCR.IsMCRJVMEnabled">
            <summary>
            This function should be used to verify if MCR is launched with JAVA enabled 
            </summary>
            <returns>Returns true if MCR is launched with JVM</returns>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR._OutDelegate">
            <summary internal="true">
            Called from native code to invoke writeToOut
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.gchOut">
            <summary internal="true">
            GCHandle to prevent the delegate from being collected by GC
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.argsOut">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.maxArgsOut">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.maxArgsIn">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.plhs">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.prhs">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.mcrResourceManager">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.MCRAppInitialized">
            <summary internal= "true">
            Internal static member variable - Initialization flag
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.mcrInstance">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCR.disposed">
            <summary internal= "true">
            Private member variable - Disposed flag
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.MWMCR.LastErrorMessage">
            <summary internal= "true">
            A read only property returning the diagnostic error message for an execution 
            error that occurs in one of the MCR "EVAL" functions.  
            </summary>
            <remarks>
            This property must be accessed before another call to an "EVAL" function 
            as it is cleared by any subsequent call.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.MWMCR.MCRInstance">
            <summary internal= "true">
            A read only property returning a pointer to the unmanaged MCR instance.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.MWMCR.CallBackDelegate">
            <summary>
            Delegate that allows native code to call back into managed code
            </summary>
            <param name="data">String to print from native code</param>
            <returns>Number of characters printed</returns>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.PlatformInfo">
            <summary>
            Utility class that provides useful information regarding operating system
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MathWorks.MATLAB.NET.Utility.NativeGCAttribute" -->
        <member name="M:MathWorks.MATLAB.NET.Utility.NativeGCAttribute.#ctor(System.Boolean)">
            <summary>
            Public <c>NativeGCAttribute</c> constructor
            </summary>
            <param name="enableGCTrigger">Enable flag for automated garbage collection of mxArray native heap allocations.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.NativeGCAttribute.#ctor(System.Boolean,System.Int32)">
            <summary>
            Public <c>NativeGCAttribute</c> constructor
            </summary>
            <param name="enableGCTrigger">Enable flag for automated garbage collection of mxArray native heap allocations.</param>
            <param name="GCBlockSize">The number of megabytes of native heap allocated to mxArrays that will result in a
            call to the add/remove memory pressure methods</param>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.NativeGCAttribute.gcEnabled">
            <summary internal= "true">
            Private variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.NativeGCAttribute.gcBlockSize">
            <summary internal= "true">
            Private variable
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.NativeGCAttribute.GCEnabled">
            <summary>
            Returns true if the custom mxArray native heap garbage collector is enabled.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.NativeGCAttribute.GCBlockSize">
            <summary>
            The number of megabytes of native heap allocated to mxArrays that will result in a
            call to the add/remove memory pressure methods
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.MWMCRVersion">
            <summary>
            Summary description for MWMCRVersion.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCRVersion.MclmcrrtDLL">
            <summary>
            The MCLMCRRT DLL from which to import the MCLMCR API
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWCellArray">
            <summary>
            <c>MWCellArray</c> derives from <c>MWArray</c> and is the managed representation of the MATLAB cell array.   
            Each element in a cell array is a container that can hold an <c>MWArray</c> or one of its derived types, 
            including another <c>MWCellArray</c>.
            </summary>
            <Remarks>
            See CELL ARRAY in the MATLAB documentation for a full description of this array type.
            </Remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.mxCalcSingleSubscript(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.Int32,System.Int32[])">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.mxCreateCellArray(System.Int32,System.Int32[])">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.mxGetCell(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.Int32)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.#ctor">
            <overloads>
             <summary>
             MATLAB cell array constructors.
             </summary>summary>
             <remarks>
             See CELL, CELLSTR, NUM2CELL, STRUCT2CELL functions in the MATLAB documentation.
             </remarks>
             </overloads>
             <summary>
             Creates an empty cell array.
             </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an M-by-N empty cell array.
            </summary>
            <param name="rows">The number of rows in the new cell array</param>
            <param name="columns">The number of columns in the new cell array</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.#ctor(System.Int32[])">
            <summary>
            Creates an M-by-N-by-P-by-... empty cell array.
            </summary>
            <remarks>
            If only one dimension is specified, an empty N-by-N cell array is created.
            </remarks>
            <param name="dimensions">An array containing the cell array dimensions.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.#ctor(MathWorks.MATLAB.NET.Arrays.MWNumericArray)">
            <summary>
            Creates an empty cell array with the dimensions specified by an <c>MWNumericArray</c> row vector.
            </summary>
            <remarks>
            If dimensions is a scalar an empty N-by-N cell array is created.
            </remarks>
            <param name="dimensions">An MWNumericArray vector containing the dimensions for the new cell array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.#ctor(MathWorks.MATLAB.NET.Arrays.MWCharArray)">
            <summary>
            Creates a cell array of strings from a two dimensional character array.
            </summary>
            <remarks>
            Places each row of the character array into separate cells of the cell array.
            </remarks>
            <param name="strings">A MATLAB character array containing rows of strings.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.#ctor(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal function
            </summary>
            <param name="disposing">Client explicit dispose flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary internal= "true">
            Internal Constructor - Deserialization constructor.
            </summary>
            <remarks>
            The arguments for this constructor are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="serializationInfo">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.ToString">
            <summary>
            Returns a formatted string representing the MATLAB cell array
            </summary>
            <returns>A string representing the cell array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.Clone">
            <summary>
            Makes a deep copy of a MATLAB cell array
            </summary>
            <remarks>
            See MATLAB documentation for the "=" operator.
            </remarks>
            <returns>The copy of the cell array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.Equals(System.Object)">
            <summary>
            Compares the current <c>MWCellArray</c> instance with the specified cell array for equality; returning a boolean value.
            </summary>
            <param name="obj">An <c>MWCellArray</c> referenced as an Object type.</param>
            <returns>true if the MATLAB arrays are equal.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.GetHashCode">
            <summary>
            Returns the hashcode for the MATLAB cell array
            </summary>
            <returns>The hashcode for the cell array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCellArray.ToArray">
            <summary>
            Returns a .NET array equivalent for the MATLAB cell array. 
            </summary>
            <returns>An array with the same dimensionality of the MATLAB array. 
            Each element in the returned array is converted to a .NET array by 
            calling MWArray.toArray() on the corresponding cell.</returns>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWCellArray._Empty">
            <summary internal= "true">
            Internal static member variable - Empty array
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWCellArray.Item(System.Int32[])">
            <summary>
            The MATLAB cell array indexer 
            </summary>
            <remarks>
            An index can be any number of integers corresponding to the array's dimensions.  As with MATLAB, 
            a single index will return the nth element in the array.
            <newpara></newpara> 
            NOTE: ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="indices">Array of integers corresponding to an array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWCellArray.Empty">
            <summary>
            Read only property returning a writeable version of an empty <c>MWCellArray</c>.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.native.MWArrayType">
            <summary>
            <c>MMArray</c> type enumeration.  
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWArrayType.Array">
            <summary>
            Root array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWArrayType.Index">
            <summary>
            Cell array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWArrayType.Numeric">
            <summary>
            Numeric array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWArrayType.Logical">
            <summary>
            Logical array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWArrayType.Character">
            <summary>
            Character array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWArrayType.Cell">
            <summary>
            Cell array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWArrayType.Structure">
            <summary>
            Structure array type.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.native.MWArray">
            <summary>
            <c>MWArray</c> is an abstract class that serves as the root of the MATLAB array class hierarchy.  
            It encapsulates a native MATLAB <c>mxArray</c> and provides a managed API for accessing, formatting,
            and manipulating the native array.
            </summary>
            <Remarks>
            <c>MWArray</c> and its derived types support the <c>ICloneable</c>, <c>ISerializable</c>, and <c>IDisposable</c> interfaces.  
            They provide implicit conversion to and from native .NET types to the appropriate MATLAB array type.
            They also provide type specific indexing based on the indexing available for the corresponding MATLAB array type.
            </Remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWArray.Equals(System.Object)">
            <summary>
            Compares two <c>MWArray</c> instances for equality (as defined by mxIsIdentical).
            </summary>
            <param name="obj">An <c>MWArray</c> referenced as an <c>Object</c> type.</param>
            <returns>true if the arrays are equal.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWArray.GetHashCode">
            <summary>
            Returns the hashcode of the <c>MWArray</c>.
            </summary>
            <returns>The hashcode for the <c>MWArray</c></returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWArray.ToString">
            <summary>
            Returns a formatted string representing the contents of the <c>MWArray</c>
            </summary>
            <returns>The formatted <c>MWArray</c> string</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWArray.Clone">
            <summary>
            Makes a deep copy of an <c>MWArray</c>.
            </summary>
            <remarks>
            See the "=" operator in the MATLAB documentation.
            </remarks>
            <returns>The deep copy of the <c>MWArray</c></returns>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.ArrayType">
            <summary>
            Read only property returning the derived type of the <c>MWArray</c> 
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.Dimensions">
            <summary>
            Read only property returning a native integer array containing the size of each dimension of the <c>MWArray</c>.
            </summary>
            <remarks>
            See Size function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.IsCellArray">
            <summary>
            Returns "true" for an <c>MWCellArray</c>.
            </summary>
            <remarks>
            See ISCELL function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.IsCharArray">
            <summary>
            Returns true for an <c>MWCharArray</c>.
            </summary>
            <remarks>
            See ISCHAR function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.IsLogicalArray">
            <summary>
            Returns true for an <c>MWLogicalArray</c>.
            </summary>
            <remarks>
            See ISLOGICAL function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.IsNumericArray">
            <summary>
            Returns true for an <c>MWNumericArray</c>.
            </summary>
            <remarks>
            See ISNUMERIC function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.IsStructArray">
            <summary>
            Returns true for an <c>MWStructArray</c>.
            </summary>
            <remarks>
            See ISSTRUCT function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.IsEmpty">
            <summary>
            Returns true if the <c>MWArray</c> is empty.
            </summary>
            <remarks>
            See ISEMPTY function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.NumberofDimensions">
            <summary>
            Read only property returning the number of dimensions in the <c>MWArray</c>.
            </summary>
            <remarks>
            See NDIMS function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWArray.NumberOfElements">
            <summary>
            Read only property returning the number of elements in the <c>MWArray</c>.
            </summary>
            <remarks>
            Equivalent to prod(size(A)) for non-empty arrays.  See NUMEL function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.MWSafeHandle">
            <summary internal= "true">
            MWSafeHandle is an internal class that will provide access to the unmanaged MATLAB mxArray wrapped by the managed
            <c>MWArray</c> class.
            </summary>
            <Remarks>
            This class along with the <c>NativeGCAttribute</c> class and the memory pressure methods will be responsible for the
            memory management and handle integrity of the unmanaged MATLAB mxArray.
            </Remarks>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWSafeHandle.mxDestroyArray(System.IntPtr)">
            <summary internal= "true">
            Internal function
            </summary>
            <exclude/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWSafeHandle.#ctor">
            <summary internal= "true">
            Default MWSafeHandle constructor creates a null pointer and sets ownership to true
            </summary>
            <Remarks>
            Called by P/Invoke when returning a safe handle
            </Remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWSafeHandle.#ctor(System.IntPtr)">
            <summary internal= "true">
            Creates a safe handle for the pointer to the specified mxArray and sets the ownership to true
            </summary>
            <param name="handle">The unmanaged mxArray handle</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWSafeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary internal= "true">
            Creates a safe handle for the pointer to the specified mxArray and sets the ownership as specified
            </summary>
            <param name="handle">The unmanaged mxArray handle</param>
            <param name="ownsHandle">Specifies if the safe handle owns the undelying unmanaged array handle</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWSafeHandle.ReleaseHandle">
            <summary internal= "true">
            Releases the unmanaged mxArray pointed to by this handle
            </summary>
            <Remarks>
            This method must always return successfully without corrupting the handle state
            </Remarks>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWObjectArray">
            <summary>
            <c>MWObjectArray</c> is a special subclass of MWArray that wraps a native .NET object in a MATLAB array 
            type that can then be accessed or returned by a MATLAB function.
            </summary>
            <remarks>
            This class is used to pass or return a .NET object by reference to or from a MATLAB function.  The object  
            is referenced in MATLAB using the MATLAB Interface to .NET.  
            </remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.#ctor(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal Constructor
            </summary>
            <param name="pMXArray">Pointer to a native mxArray</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.#ctor">
            <summary>
            The default constructor creates an empty <c>MWObjectArray</c> containg an empty .NET object.  
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.#ctor(System.Object)" -->
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal function
            </summary>
            <param name="disposing">Client explicit dispose flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.op_Equality(MathWorks.MATLAB.NET.Arrays.MWObjectArray,MathWorks.MATLAB.NET.Arrays.MWObjectArray)">
            <summary>
            Compares the two encapsulated .NET objects for reference equality; that is, they must be the same object.
            </summary>
            <param name="objectArray">An instance of <c>MWObjectArray</c></param>
            <returns>The result of the comparison for equality</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.op_Inequality(MathWorks.MATLAB.NET.Arrays.MWObjectArray,MathWorks.MATLAB.NET.Arrays.MWObjectArray)">
            <summary>
            Compares the two encapsulated .NET objects for reference inequality; that is, they are different objects.
            </summary>
            <param name="objectArray">An instance of <c>MWObjectArray</c></param>
            <returns>The result of the comparison for inequality</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.Equals(System.Object)">
            <summary>
            Compares the two encapsulated .NET objects for reference equality; that is, they must be the same object.
            </summary>
            <param name="obj">An instance of <c>MWObjectArray</c></param>
            <returns>The result of the comparison for equality</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization function.
            </summary>
            <remarks>
            The arguments for this function are supplied by the .NET serialization infrastructure.
            This function should only be called if the encapsulated object supports the ISerializeable 
            interface.
            </remarks>
            <param name="info">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary internal= "true">
            Internal deserialization constructor.
            </summary>
            <remarks>
            Note: the arguments for this constructor are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="serializationInfo">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.Clone">
            <summary>
            Makes a deep copy of the encapsulated .NET object.
            </summary>
            <returns>The copy of the encapsulated .NET object</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.GetHashCode">
            <summary>
            Returns the hashcode of the <c>MWArray</c>.
            </summary>
            <returns>The hashcode for the <c>MWArray</c></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MathWorks.MATLAB.NET.Arrays.MWObjectArray.ToString" -->
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWObjectArray.Item(System.Int32[])">
            <summary>
            <c>MWObjectArray</c> indexer
            </summary>
            <remarks>
            Note: This indexer exists primarily to provide compatibility with the other data conversion classes
                  derived from <c>MWArray</c>.  Arrays of this type are always single element arrays and, 
                  therefore, the indexer must always resolve to 1.  As this type of array is essentially a
                  scalar, the getter simply returns the reference to the encapsulated object while the setter updates
                  the encapsulated object with the newly assigned value.
            <newpara></newpara> 
            NOTE: ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="indices">Array of integers (max. 2; values must be 1) corresponding to a MATLAB array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWObjectArray.IsDisposed">
            <summary>
            Read only property returning the handle status of the encapsulated <c>MWArray</c>
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWObjectArray.IsEmpty">
            <summary>
            Returns true if the <c>MWArray</c> is empty.
            </summary>
            <remarks>
            See ISEMPTY function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWObjectArray.MXArrayHandle">
            <summary>
            Internal, readOnly property returning a pointer to the encapsulated native object
            as an mxArray.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWObjectArray.Empty">
            <summary>
            Read-only property returning a writeable version of an empty <c>MWNativeObject</c>.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWObjectArray.Object">
            <summary>
            This property returns the encapsulated .NET object 
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.MWCTFStreamReader">
            <summary internal= "true">
            MWCTFStreamReader is an internal utility class that reads CTF bytes from stream. 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWCTFStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Public constructor
            </summary>
            <param name="embeddedCtfStream">The CTF stream to be read from.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWCTFStreamReader.readCtfStream(System.IntPtr,System.Int32)">
            <summary>
            This call back method reads the CTF bytes from stream.
            </summary>
            <param name="ctfByte">The bytes that will be read from CTF stream</param>
            <param name="readSize">Number of bytes to read</param>
            <returns>Actual number of bytes read from CTF stream.</returns>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWCTFStreamReader.ctfStreamReader">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWCTFStreamReader.readCtfStreamFcn">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWCTFStreamReader._readCtfStream">
            <summary internal="true">
            Called from native code to invoke readCtfStream
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.MWCTFStreamReader.CtfStreamReadFcn">
            <summary>
            Public property get mashaled pointer of CTF stream read call back function.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.MWCTFStreamReader.ReadCtfStreamDelegate">
            <summary>
            Delegate that allows native code to call back to read CTF stream 
            </summary>
            <param name="ctfByte">hold bytes that read from CTF stream</param>
            <param name="size">size of bytes to read from CTF stream</param>
            <returns>Actual number of bytes read from CTF stream</returns>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWArrayComponent">
            <summary>
            MATLAB numeric array component enumerator.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayComponent.Real">
            <summary>
            Real Part.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayComponent.Imaginary">
            <summary>
            Imaginary Part.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWArrayComplexity">
            <summary>
            MATLAB numeric array complexity enumerator.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayComplexity.Real">
            <summary>
            The numeric array is real.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayComplexity.Complex">
            <summary>
            The numeric array is complex.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWNumericType">
            <summary>
            MATLAB numeric array data type enumerator.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.Double">
            <summary>
            Double array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.Single">
            <summary>
            Single array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.Int8">
            <summary>
            INT8 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.UInt8">
            <summary>
            UInt8 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.Int16">
            <summary>
            Int16 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.UInt16">
            <summary>
            UInt16 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.Int32">
            <summary>
            Int32 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.UInt32">
            <summary>
            UInt32 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.Int64">
            <summary>
            Int64 array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericType.UInt64">
            <summary>
            UINT64 array type.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            <c>MWNumericArray</c> is the managed representation of the MATLAB numeric array types.  Like its MATLAB 
            equivalent, it is the default array type used by most of the MATLAB math functions.  
            </summary>
            <remarks>
            As <c>MWNumericArray</c> is derived from <c>MWIndexArray</c> it can be used in all MATLAB indexing operations.
            <newpara></newpara>    
            See NUMERIC ARRAY in the MATLAB documentation for a full description of this array type.
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxCreateDoubleMatrix(System.Int32,System.Int32,MathWorks.MATLAB.NET.Arrays.MWArrayComplexity)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxCreateNumericArray(System.Int32,System.Int32[],MathWorks.MATLAB.NET.Arrays.MWNumericType,MathWorks.MATLAB.NET.Arrays.MWArrayComplexity)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxFastZeros(MathWorks.MATLAB.NET.Arrays.MWArrayComplexity,System.Int32,System.Int32)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxGetEps">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxGetImagData(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxGetInf">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxGetNaN">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxGetPi(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxGetPr(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsComplex(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsFinite(System.Double)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsInf(System.Double)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsNaN(System.Double)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsUint8(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsInt16(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsInt32(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsInt64(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsSingle(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mxIsDouble(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.array_handle_imag(System.IntPtr)">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.array_handle_real(System.IntPtr)">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mclMXArrayGetReal(MathWorks.MATLAB.NET.Utility.MWSafeHandle@,MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.IntPtr,System.IntPtr[])">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mclMXArrayGetImag(MathWorks.MATLAB.NET.Utility.MWSafeHandle@,MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.IntPtr,System.IntPtr[])">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mclMXArraySetReal(MathWorks.MATLAB.NET.Utility.MWSafeHandle,MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.IntPtr,System.IntPtr[])">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mclMXArraySetImag(MathWorks.MATLAB.NET.Utility.MWSafeHandle,MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.IntPtr,System.IntPtr[])">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.mclGetNumericSparse(System.IntPtr@,System.IntPtr,System.IntPtr[],System.IntPtr,System.IntPtr[],System.IntPtr,System.Double[],System.Double[],System.IntPtr,System.IntPtr,System.IntPtr,MathWorks.MATLAB.NET.Arrays.MWArray.MATLABArrayType,MathWorks.MATLAB.NET.Arrays.MWArrayComplexity)">
            <summary internal= "true">
            Internal function 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#cctor">
            <summary internal="true">
            Static constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor">
            <overloads>
             <summary>
             MATLAB numeric array constructors.
             </summary>
             </overloads>
             <summary>
             Creates an empty double numeric array.
             </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(MathWorks.MATLAB.NET.Arrays.MWNumericType)">
            <summary>
            Creates an empty numeric array of the specified type.
            </summary>
            <param name="dataType">The data type of the numeric array</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Byte)">
            <summary>
            Creates a double numeric scalar from a byte value.
            </summary>
            <remarks>
            The byte value is converted to a numeric double scalar so that it can be used in the double
            array computations supported by MATLAB.  To create an uint8 scalar use the constructor 
            MWNumericArray(byte scalar, bool makeDouble) and set makeDouble to false.
            </remarks>
            <param name="scalar">A byte scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Byte,System.Boolean)">
            <summary>
            Creates an uint8 numeric scalar from a byte value.  
            </summary>
            <remarks>
            The scalar can be converted to a double numeric scalar as specified by the caller.  
            </remarks>
            <param name="scalar">A byte scalar value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Byte,System.Byte)">
            <summary>
            Creates a complex double numeric scalar from a real and imaginary byte value.  
            </summary>
            <remarks>
            This constructor creates a complex double numeric scalar that can be used in the double array 
            computations supported by MATLAB.  To create an uint8 complex scalar use the constructor 
            MWNumericArray(byte realValue, byte imaginaryValue, bool makeDouble) and set the makeDouble flag 
            to false.
            </remarks>
            <param name="realValue">The real scalar value</param>
            <param name="imaginaryValue">The imaginary scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Creates a complex uint8 numeric scalar from a real and imaginary byte value.  
            </summary>
            <remarks>
            The scalar can be converted to a complex double numeric scalar as specified by the caller.  
            </remarks>
            <param name="realValue">The real value</param>
            <param name="imaginaryValue">The imaginary value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int16)">
            <summary>
            Creates a double numeric scalar from a short value.
            </summary>
            <remarks>
            The short value is converted to a numeric double scalar that can be used in the double
            array computations supported by MATLAB.  To create a short scalar use the constructor 
            MWNumericArray(short scalar, bool makeDouble) and set the makeDouble flag to false.
            </remarks>
            <param name="scalar">A short scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int16,System.Boolean)">
            <summary>
            Creates an int16 numeric scalar from a short value.  
            </summary>
            <remarks>
            The scalar can be converted to a double numeric scalar as specified by the caller.  
            </remarks>
            <param name="scalar">A short scalar value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int16,System.Int16)">
            <summary>
            Creates a complex double numeric scalar from a real and imaginary short value.  
            </summary>
            <remarks>
            This constructor creates a complex double numeric scalar that can be used in the double array 
            computations supported by MATLAB.  To create an int16 complex scalar use the constructor 
            MWNumericArray(short realValue, short imaginaryValue, bool makeDouble) and set the makeDouble flag to false.
            </remarks>
            <param name="realValue">The real scalar value</param>
            <param name="imaginaryValue">The imaginary scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int16,System.Int16,System.Boolean)">
            <summary>
            Creates a complex int16 numeric scalar from a real and imaginary short value. 
            </summary>
            <remarks>
            The scalar can be converted to a complex double numeric scalar as specified by the caller.  
            </remarks>
            <param name="realValue">The real scalar value</param>
            <param name="imaginaryValue">The imaginary scalar value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32)">
            <summary>
            Creates a double numeric scalar from an integer value.
            </summary>
            <remarks>
            The integer value is converted to a numeric double scalar that can be used in the double
            array computations supported by MATLAB.  To create an integer scalar use the constructor 
            MWNumericArray(int scalar, bool makeDouble) and set the makeDouble flag to false.
            </remarks>
            <param name="scalar">An integer value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates an int32 numeric scalar from an integer value.  
            </summary>
            <remarks>
            The scalar can be converted to a double numeric scalar as specified by the caller.  
            </remarks>
            <param name="scalar">An integer scalar value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a complex double numeric scalar from a real and imaginary integer value.  
            </summary>
            <remarks>
            This constructor creates a complex double numeric scalar so that it can be used in the double array 
            computations supported by MATLAB.  To create an int32 complex scalar use the constructor 
            MWNumericArray(int realValue, int imaginaryValue, bool makeDouble) and set makeDouble to false.
            </remarks>
            <param name="realValue">The real value</param>
            <param name="imaginaryValue">The imaginary value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a complex int32 numeric scalar from a real and imaginary integer value. 
            </summary>
            <remarks>
            The scalar can be converted to a complex double numeric scalar as specified by the caller.  
            </remarks>
            <param name="realValue">The real value</param>
            <param name="imaginaryValue">The imaginary value</param>
            <param name="makeDouble">Convert scalar to double</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int64)">
            <summary>
            Creates a double numeric scalar from a long value.
            </summary>
            <remarks>
            The long value is converted to a numeric double scalar that can be used in the double
            array computations supported by MATLAB.  To create a long scalar use the constructor 
            MWNumericArray(long scalar, bool makeDouble) and set makeDouble to false.
            </remarks>
            <param name="scalar">A long scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int64,System.Boolean)">
            <summary>
            Creates an int64 numeric scalar from a long value.  
            </summary>
            <remarks>
            The scalar can be converted to a double numeric scalar as specified by the caller.  
            </remarks>
            <param name="scalar">A long scalar value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int64,System.Int64)">
            <summary>
            Creates a complex double numeric scalar from a real and imaginary long value.  
            </summary>
            <remarks>
            This constructor creates a complex double numeric scalar that can be used in the double array 
            computations supported by MATLAB.  To create an int64 complex scalar use the constructor 
            MWNumericArray(long realValue, long imaginaryValue, bool makeDouble) and set the makeDouble flag to false.
            </remarks>
            <param name="realValue">The real scalar value</param>
            <param name="imaginaryValue">The imaginary scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Creates a complex int64 numeric scalar from a real and imaginary long value. 
            </summary>
            <remarks>
            The scalar can be converted to a complex double numeric scalar as specified by the caller.  
            </remarks>
            <param name="realValue">The real scalar value</param>
            <param name="imaginaryValue">The imaginary scalar value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Single)">
            <summary>
            Creates a MATLAB double numeric scalar from a float value.
            </summary>
            <remarks>
            The float value is converted to a numeric double scalar that can be used in the double
            array computations supported by MATLAB.  To create a float scalar use the constructor 
            MWNumericArray(float scalar, bool makeDouble) and set the makeDouble flag to false.
            </remarks>
            <param name="scalar">A float scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Single,System.Boolean)">
            <summary>
            Creates a floating point numeric scalar from a float value.  
            </summary>
            <remarks>
            The scalar can be converted to a double numeric scalar as specified by the caller.  
            </remarks>
            <param name="scalar">A float scalar value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Single,System.Single)">
            <summary>
            Creates a complex double numeric scalar from a real and imaginary float value.  
            </summary>
            <remarks>
            This constructor creates a complex double numeric scalar that can be used in the double array 
            computations supported by MATLAB.  To create a floating point complex scalar use the constructor 
            MWNumericArray(float realValue, float imaginaryValue, bool makeDouble) and set the makeDouble flag to false.
            </remarks>
            <param name="realValue">The real scalar value</param>
            <param name="imaginaryValue">The imaginary scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a complex floating point numeric scalar from a real and imaginary float value. 
            </summary>
            <remarks>
            The scalar can be converted to a complex double numeric scalar as specified by the caller.  
            </remarks>
            <param name="realValue">The real scalar value</param>
            <param name="imaginaryValue">The imaginary scalar value</param>
            <param name="makeDouble">Convert scalar to double flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Double)">
            <summary>
            Constructs a double numeric scalar from a double value.
            </summary>
            <param name="scalar">A double scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a complex double numeric scalar from a real and imaginary double value.  
            </summary>
            <param name="realValue">The real scalar value</param>
            <param name="imaginaryValue">The imaginary scalar value</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32[])">
            <summary>
            Creates an m-by-n-by-p-by-... empty real, double numeric array initialized to zeros.
            </summary>
            <remarks>
            If only one dimension is specified, an empty n-by-n array is created.
            </remarks>
            <param name="dimensions">A variable number of array dimensions.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(MathWorks.MATLAB.NET.Arrays.MWArrayComplexity,System.Int32[])">
            <summary>
            Creates an m-by-n-by-p-by-... empty double numeric array initialized to zeros.
            </summary>
            <remarks>
            If only one dimension is specified, an empty n-by-n array is created.
            </remarks>
            <param name="complexity">A flag indicating whether to create a real or complex array.</param>
            <param name="dimensions">A variable number of array dimensions.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(MathWorks.MATLAB.NET.Arrays.MWArrayComplexity,MathWorks.MATLAB.NET.Arrays.MWNumericType,System.Int32[])">
            <summary>
            Creates an m-by-n-by-p-by-... empty numeric array initialized to zeros.
            </summary>
            <remarks>
            If only one dimension is specified, an empty n-by-n array is created.
            </remarks>
            <param name="complexity">Indicates whether to create a real or complex array.</param>
            <param name="dataType">Indicates the type of numeric array to create.</param>
            <param name="dimensions">A variable number of array dimensions.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creates an m-by-n double array from a native vector of byte values in row major order.
            </summary>
            <remarks>
            A double numeric array is created that can be used in the double array computations supported 
            by MATLAB.  To create a true uint8 array, or to use a data vector in column major order use 
            the constructor: MWNumericArray(int rows, int columns, byte[] realData, bool makeDouble, bool rowMajorData).
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A byte array of length [rows x columns] containing the real data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n uint8 array from a native vector of byte values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A byte array of length [rows x columns] containing the real data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vector is in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Creates an m-by-n complex double array from a real and imaginary vector of byte values in row major order.
            </summary>
            <remarks>
            A complex double numeric array is created that can be used in the double array computations supported by 
            MATLAB.  To create a true complex uint8 array, or to use a data vector in column major order use the 
            constructor: MWNumericArray(int rows, int columns, byte[] realData, byte[] imaginaryData, bool makeDouble, bool rowMajorData).
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A byte array of length [rows x columns] containing the real data in row major order.</param>
            <param name="imaginaryData">A byte array of length [rows x columns] containing the imaginary data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n complex uint8 array from a native vector of byte values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a complex double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A byte array of length [rows x columns] containing the real data.</param>
            <param name="imaginaryData">A byte array of length [rows x columns] containing the imaginary data.</param>
            <param name="makeDouble">Complex double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vectors are in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int16[])">
            <summary>
            Creates an m-by-n double array from a native vector of short values in row major order.
            </summary>
            <remarks>
            A double numeric array is created so that it can be used in the double array computations supported by MATLAB.
            To create a true int16 array, or to use a data vector in column major order use the constructor: 
            MWNumericArray(int rows, int columns, short[] realData, bool makeDouble, bool rowMajorData).
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A short array of length [rows x columns] containing the real data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int16[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n int16 array from a native vector of short values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A short array of length [rows x columns] containing the real data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vector is in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int16[],System.Int16[])">
            <summary>
            Creates an m-by-n complex double array from a real and imaginary vector of short values in row major order.
            </summary>
            <remarks>
            A complex double numeric array is created so that it can be used in the double array computations supported 
            by MATLAB.  To create a true complex int16 array, or to use a data vector in column major order use the 
            constructor: MWNumericArray(int rows, int columns, short[] realData, short[] imaginaryData, bool makeDouble, bool rowMajorData).
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A short array of length [rows x columns] containing the real data in row major order.</param>
            <param name="imaginaryData">A short array of length [rows x columns] containing the imaginary data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int16[],System.Int16[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n complex int16 array from a native vector of short values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a complex double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A short array of length [rows x columns] containing the real data.</param>
            <param name="imaginaryData">A short array of length [rows x columns] containing the imaginary data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vectors are in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates an m-by-n double array from a native vector of integer values in row major order.
            </summary>
            <remarks>
            A double numeric array is created so that it can be used in the double array computations supported by MATLAB.
            To create a true int32 array, or to use a data vector in column major order use the constructor: 
            MWNumericArray(int rows, int columns, int[] realData, bool makeDouble, bool rowMajorData).
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">An integer array of length [rows x columns] containing the real data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n int32 array from a native vector of integer values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">An integer array of length [rows x columns] containing the real data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vector is in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Creates an m-by-n complex double array from a real and imaginary vector of integer values in row major order.
            </summary>
            <remarks>
            A complex double numeric array is created that can be used in the double array computations supported by MATLAB.  
            To create a true complex int32 array, or to use a data vector in column major order use the constructor: 
            MWNumericArray(int rows, int columns, int[] realData, int[] imaginaryData, bool makeDouble, bool rowMajorData).
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">An integer array of length [rows x columns] containing the real data in row major order.</param>
            <param name="imaginaryData">An integer array of length [rows x columns] containing the imaginary data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n complex int32 array from a native vector of integer values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a complex double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">An integer array of length [rows x columns] containing the real data.</param>
            <param name="imaginaryData">An integer array of length [rows x columns] containing the imaginary data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vectors are in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int64[])">
            <summary>
            Creates an m-by-n double array from a native vector of long values in row major order.
            </summary>
            <remarks>
            A double numeric array is created that can be used in the double array computations supported by MATLAB.  
            To create a true int64 array, or to use a data vector in
            column major order use the constructor: 
            MWNumericArray(int rows, int columns, long[] realData, bool makeDouble, bool rowMajorData).
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A long array of length [rows x columns] containing the real data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int64[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n int64 array from a native vector of long values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A long array of length [rows x columns] containing the real data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vector is in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int64[],System.Int64[])">
            <summary>
            Creates an m-by-n complex double array from a real and imaginary vector of long values in row major order.
            </summary>
            <remarks>
            A complex double numeric array is created so that it can be used in the double array computations supported 
            by MATLAB.  To create a true complex int64 array, or to use a data vector in column major order use the 
            constructor: MWNumericArray(int rows, int columns, long[] realData, long[] imaginaryData, bool makeDouble, bool rowMajorData).
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A long array of length [rows x columns] containing the real data in row major order.</param>
            <param name="imaginaryData">A long array of length [rows x columns] containing the imaginary data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Int64[],System.Int64[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n complex int64 array from a native vector of long values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a complex double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A long array of length [rows x columns] containing the real data.</param>
            <param name="imaginaryData">A long array of length [rows x columns] containing the imaginary data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vectors are in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Single[])">
            <summary>
            Creates an m-by-n double array from a native vector of floating point values in row major order.
            </summary>
            <remarks>
            A double numeric array is created that can be used in the double array computations supported by MATLAB.
            To create a true floating point array, or to use a data vector in column major order use the constructor: 
            MWNumericArray(int rows, int columns, float[] realData, bool makeDouble, bool rowMajorData).
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A float array of length [rows x columns] containing the real data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Constructs an m-by-n floating point array from a native vector of floating point values.
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a double array.  Setting the rowMajorData flag to false
            allows a data vector in column major order to be passed to this constructor.   
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A floating point array of length [rows x columns] containing the real data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vector is in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Single[],System.Single[])">
            <summary>
            Creates an m-by-n complex double array from a real and imaginary vector of floating point values in row major order.
            </summary>
            <remarks>
            A complex double numeric array is created that can be used in the double array computations supported by MATLAB.  
            To create a true complex floating point array, or to use a data vector in column major order use the constructor: 
            MWNumericArray(int rows, int columns, float[] realData, float[] imaginaryData, bool makeDouble, bool rowMajorData).
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A floating point array of length [rows x columns] containing the real data in row major order.</param>
            <param name="imaginaryData">A floating point array of length [rows x columns] containing the imaginary data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Single[],System.Single[],System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n complex floating point array from a native vector of floating point values.
            </summary>
            <remarks>
            Setting the makeDouble parameter to true will create a complex double array.  Setting the rowMajorData flag to
             false allows a data vector in column major order to be passed to this constructor.   
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A floating point array of length [rows x columns] containing the real data.</param>
            <param name="imaginaryData">A floating point array of length [rows x columns] containing the imaginary data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vectors are in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Creates an m-by-n double array from a native vector of double values in row major order.
            </summary>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A double array of length [rows x columns] containing the real data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Double[],System.Boolean)">
            <summary>
            Creates an m-by-n double array from a native vector of double values.
            </summary>
            <remarks>
            Setting the rowMajorData flag to false allows a data vector in column major order to be passed to this constructor.   
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A double array of length [rows x columns] containing the real data.</param>
            <param name="rowMajorData">A flag indicating that the data vector is in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Creates an m-by-n complex double array from a real and imaginary vector of double values in row major order.
            </summary>
            <remarks>
            To use a data vector in column major order use the constructor: 
            MWNumericArray(int rows, int columns, double[] realData, double[] imaginaryData, bool rowMajorData).
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A double array of length [rows x columns] containing the real data in row major order.</param>
            <param name="imaginaryData">A double array of length [rows x columns] containing the imaginary data in row major order.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Int32,System.Int32,System.Double[],System.Double[],System.Boolean)">
            <summary>
            Creates an m-by-n complex double array from a native vector of double values.
            </summary>
            <remarks>
            Setting the rowMajorData flag to false allows a data vector in column major order to be passed to this constructor.   
            <newpara></newpara>
            The size and row order of the real data vector must match that of the imaginary data vector.
            </remarks>
            <param name="rows">The number of rows in the array</param>
            <param name="columns">The number of columns in the array</param>
            <param name="realData">A double array of length [rows x columns] containing the real data.</param>
            <param name="imaginaryData">A double array of length [rows x columns] containing the imaginary data.</param>
            <param name="rowMajorData">A flag indicating that the data vectors are in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Array)">
            <summary>
            Creates an m-by-n-by-p-by-... real double numeric array from a native array in row major order.
            The numeric array will have the same shape as the user specified data array. 
            </summary>
            <remarks>
            A real double numeric array is created that can be used in the double array computations supported by MATLAB.
            To create a specific array type, or to use a data array in column major order use the constructor: 
            MWNumericArray(Array realData, bool makeDouble, bool rowMajorData).
            Valid types are byte, short, int, long, float, or double.  Jagged arrays are not allowed.  
            <newpara></newpara> 
            NOTE: As MATLAB arrays must have at least two dimensions, single dimension data vectors will result in the 
            creation of a two dimensional array with a single row.
            </remarks>
            <param name="realData">A native array containng the real data.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Array,System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n-by-p-by-... real numeric array from a native array in row major order.
            The numeric array will have the same shape as the user specified data array. 
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a double array regardless of the type of the native data 
            array.  Setting the rowMajorData flag to false, allows a data vector in column major order to be passed to 
            this constructor. Valid data types are byte, short, int, long, float, or double.  Jagged arrays are not allowed.  
            <newpara></newpara>
            NOTE: As MATLAB arrays must have at least two dimensions, single dimension data vectors will result in the 
            creation of a two dimensional array with a single row.
            </remarks>
            <param name="realData">A native array containing the real data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vector is in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Array,System.Array)">
            <summary>
            Creates an m-by-n-by-p-by-... complex numeric array from a real and imaginary native array in
            row major order.  The numeric array will have the same shape as the user specified data arrays. 
            </summary>
            <remarks>
            A complex double numeric array is created that can be used in the double array computations supported 
            by MATLAB.  To create a complex array of a specific type, or to use data arrays in column major order 
            use the constructor: 
            MWNumericArray(Array realData, Array imaginaryData, bool makeDouble, bool rowMajorData).
            <newpara></newpara> 
            NOTE: Valid data arrays are non-jagged arrays of type byte, short, int, long, float, or double.  The 
            imaginary data array can be null, but if not, its size, row order, and type must match the real data array.  
            </remarks>
            <param name="realData">A native array containing the real data.</param>
            <param name="imaginaryData">A native array containing the imaginary data.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Array,System.Array,System.Boolean,System.Boolean)">
            <summary>
            Creates an m-by-n-by-p-by-... complex numeric array of the specified type from a real and imaginary native
            array in row major order.  The numeric array will have the same shape as the user specified data arrays.  
            </summary>
            <remarks>
            Setting the makeDouble flag to true will create a complex double array regardless of the type of the data 
            arrays.  Setting the rowMajorData flag to false, allows a data vector in column major order to be passed to 
            this constructor. Valid data types are byte, short, int, long, float, or double.  Jagged arrays are not allowed.  
            <newpara></newpara>
            NOTE: As MATLAB arrays must have at least two dimensions, single dimension data vectors will result in the 
            creation of a two dimensional array with a single row.
            </remarks>
            <param name="realData">A native array containing the real data.</param>
            <param name="imaginaryData">A native array containing the imaginary data.</param>
            <param name="makeDouble">Double array flag</param>
            <param name="rowMajorData">A flag indicating that the data vector is in row major order</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(MathWorks.MATLAB.NET.Arrays.MWArrayComponent,System.Int32,System.Int32)">
            <summary internal= "true">
            Internal Constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Double,System.Double,System.Double)">
            <summary internal= "true">
            Internal Constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal function
            </summary>
            <param name="disposing">Client explicit dispose flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Byte)~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a native byte value to a MATLAB uint8 numeric scalar.
            </summary>
            <param name="scalar">A byte scalar value.</param>
            <returns>A MATLAB uint8 scalar containing the byte value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Int16)~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a native short value to a MATLAB int16 numeric scalar.
            </summary>
            <param name="scalar">A short scalar value.</param>
            <returns>A MATLAB int16 scalar containing the short value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Int32)~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a native integer scalar to a MATLAB double numeric scalar.
            </summary>
            <remarks>
            Integer casts to numeric arrays are automatically promoted to type double.  This is done so that the
            default C# type (integer) is cast to the default MATLAB type (double).  To create an integer scalar 
            you must use the explicit integer scalar constructor.
            </remarks>
            <param name="scalar">An integer scalar value.</param>
            <returns>A MATLAB double scalar containing the integer value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Int64)~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a native long scalar to a MATLAB Int64 numeric scalar.
            </summary>
            <param name="scalar">A long scalar value.</param>
            <returns>A MATLAB Int64 scalar containing the long value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Single)~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a native floating point scalar to a MATLAB single numeric scalar.
            </summary>
            <param name="scalar">A floating point scalar value.</param>
            <returns>A MATLAB single scalar containing the float value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Double)~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a native double scalar to a MATLAB double numeric scalar.
            </summary>
            <param name="scalar">A double scalar value.</param>
            <returns>A MATLAB double scalar containing the double value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Byte[])~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a one dimensional native array of byte values to a MATLAB uint8 real numeric array.
            </summary>
            <param name="values">A one dimensional array of byte values.</param>
            <returns>A MATLAB uint8 numeric array containing the byte values.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Int16[])~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a one dimensional native array of short values to a MATLAB Int16 real numeric array.
            </summary>
            <param name="values">A one dimensional array of short values.</param>
            <returns>A MATLAB Int16 numeric array containing the short values.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Int32[])~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a one dimensional native array of integer values to a MATLAB double real numeric array.
            </summary>
            <remarks>
            Integer casts to numeric arrays are automatically promoted to type double.  This is done so that the
            default C# type (integer) is cast to the default MATLAB type (double).  To create an integer array 
            you must use the explicit integer array constructor.
            </remarks>
            <param name="values">A one dimensional array of integer values.</param>
            <returns>A MATLAB double numeric array containing the inetger values.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Int64[])~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a one dimensional native array of long values to a MATLAB Int64 real numeric array.
            </summary>
            <param name="values">A one dimensional array of long values.</param>
            <returns>A MATLAb Int64 numeric array containing the long values.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Single[])~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a one dimensional native array of floating point values to a MATLAB single real numeric array.
            </summary>
            <param name="values">A one dimensional array of floating point values.</param>
            <returns>A MATLAB single numeric array containing the floating point values.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Double[])~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a one dimensional native array of double values to a MATLAB double real numeric array.
            </summary>
            <param name="values">A one dimensional array of double values.</param>
            <returns>A MATLAB double numeric array containing the double values.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Implicit(System.Array)~MathWorks.MATLAB.NET.Arrays.MWNumericArray">
            <summary>
            Implicit cast from a generic native array to a MATLAB numeric array of the same numeric type.
            </summary>
            <param name="realData">An array of native numeric values.</param>
            <returns>A MATLAB numeric array containing the native numeric values.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Explicit(MathWorks.MATLAB.NET.Arrays.MWNumericArray)~System.Byte">
            <summary>
            Implicit cast from a MATLAB uint8 numeric scalar to a byte value.
            </summary>
            <param name="array">A MATLAB uint8 scalar.</param>
            <returns>A byte value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Explicit(MathWorks.MATLAB.NET.Arrays.MWNumericArray)~System.Int16">
            <summary>
            Implicit cast from a MATLAB Int16 numeric scalar to a short value.
            </summary>
            <param name="array">An Int16 scalar.</param>
            <returns>A short value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Explicit(MathWorks.MATLAB.NET.Arrays.MWNumericArray)~System.Int32">
            <summary>
            Implicit cast from a MATLAB Int32 numeric scalar to an integer value.
            </summary>
            <param name="array">An Int32 scalar.</param>
            <returns>An integer value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Explicit(MathWorks.MATLAB.NET.Arrays.MWNumericArray)~System.Int64">
            <summary>
            Implicit cast from a MATLAB Int64 numeric scalar to a long value.
            </summary>
            <param name="array">An Int64 scalar.</param>
            <returns>A long value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Explicit(MathWorks.MATLAB.NET.Arrays.MWNumericArray)~System.Single">
            <summary>
            Implicit cast from a MATLAB single numeric scalar to a floating point value.
            </summary>
            <param name="array">A single scalar.</param>
            <returns>A floating point value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.op_Explicit(MathWorks.MATLAB.NET.Arrays.MWNumericArray)~System.Double">
            <summary>
            Implicit cast from a MATLAB double numeric scalar to a double value.
            </summary>
            <remarks>
            See STR2NUM function in the MATLAB documentation.
            </remarks>
            <param name="array">A double scalar.</param>
            <returns>A double value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToScalarByte">
            <summary>
            Converts the MATLAB uint8 numeric scalar to a byte value.
            </summary>
            <remarks>
            If the MATLAB array is not a scalar, the first element is used.
            </remarks>
            <returns>A byte value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToScalarShort">
            <summary>
            Converts the MATLAB int16 numeric scalar to a short value.
            </summary>
            <remarks>
            If the MATLAB array is not a scalar, the first element is used.
            </remarks>
            <returns>A short value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToScalarInteger">
            <summary>
            Converts the MATLAB int32 numeric scalar to an integer value.
            </summary>
            <remarks>
            If the MATLAB array is not a scalar, the first element is used.
            </remarks>
            <returns>An integer value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToScalarLong">
            <summary>
            Converts the MATLAB int64 numeric scalar to a long value.
            </summary>
            <remarks>
            If the MATLAB array is not a scalar, the first element is used.
            </remarks>
            <returns>A long value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToScalarFloat">
            <summary>
            Converts the MATLAB single numeric scalar to a floating point value.
            </summary>
            <remarks>
            If the MATLAB array is not a scalar, the first element is used.
            </remarks>
            <returns>A floating point value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToScalarDouble">
            <summary>
            Converts the MATLAB double numeric scalar to a double value.
            </summary>
            <remarks>
            If the MATLAB array is not a scalar, the first element is used.
            </remarks>
            <returns>A double value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary internal= "true">
            Internal deserialization constructor.
            </summary>
            <remarks>
            Note: the arguments for this constructor are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="serializationInfo">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.validateInput(System.Int32,System.Array,System.Array)">
            <summary>
            Internal static method that checks if the size specified for the MWNumericArray matches 
            the size of the data passed in and for complex arrays checks that the size and rank
            of the real and imaginary component match.
            </summary>
            <param name="specifiedSize">size of the new MWNumericArray </param>
            <param name="realData">real component</param>
            <param name="imaginaryData">imaginary component</param>
            <returns>void if valid, otherwise throws an Exception</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.MakeSparse(System.Int32,System.Int32,MathWorks.MATLAB.NET.Arrays.MWArrayComplexity,System.Int32)">
            <overloads>
             <summary>
             Constructs a sparse numeric matrix.
             </summary>
             </overloads>
             <summary>
             Constructs an empty sparse numeric matrix with the specified number of rows and columns and storage for
             the specified number of non-zero elements.
             </summary>
             <param name="rows">Number of rows in the sparse matrix</param>
             <param name="columns">Number of columns in the sparse matrix</param>
             <param name="complexity">The array complexity flag</param>
             <param name="nonZeroMax">Maximum number of nonzero elements in the sparse matrix</param>
             <returns>The sparse numeric matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.MakeSparse(System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Constructs a real sparse numeric matrix with the number of rows= max{rowIndex(k)} and the number of 
            columns= max{colIndex(k)}.  It initializes the array with the supplied data.
            The maximum number of nonzero elements is equal to the length of the data array. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= realData(k). Any elements of the data array 
            that have duplicate values of rowIndex and columnIndex are added together.  
            </remarks>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based row indices</param>
            <param name="realData">The real data array for the sparse matrix</param>
            <returns>The sparse numeric matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.MakeSparse(System.Int32[],System.Int32[],System.Double[],System.Double[])">
            <summary>
            Constructs a complex sparse numeric matrix with the number of rows= max{rowIndex(k)} and the number of 
            columns= max{colIndex(k)}.  It initializes the array with the supplied data.
            The maximum number of nonzero elements is equal to the length of the data arrays. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= realData(k). Any elements of the data array 
            that have duplicate values of rowIndex and columnIndex are added together.  
            </remarks>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based row indices</param>
            <param name="realData">The real data array for the sparse matrix</param>
            <param name="imaginaryData">The imaginary data array for the sparse matrix</param>
            <returns>The sparse numeric matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.MakeSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[])">
            <summary>
            Constructs a real sparse, numeric matrix with the specified number of rows and columns.  
            It initializes the array with the supplied data. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= realData(k). Any elements of the data array 
            that have duplicate values of rowIndex and columnIndex are added together.  
            </remarks>
            <param name="rows">Number of rows in the sparse matrix</param>
            <param name="columns">Number of columns in the sparse matrix</param>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based column indices</param>
            <param name="realData">The real data array for the sparse matrix</param>
            <returns>The sparse numeric matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.MakeSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[],System.Int32)">
            <summary>
            Constructs a real sparse, numeric matrix with the specified number of rows and columns and
            maximum nonzero elements.  It initializes the array with the supplied data. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= realData(k). Any elements of the data array 
            that have duplicate values of rowIndex and columnIndex are added together.  
            </remarks>
            <param name="rows">Number of rows in the sparse matrix</param>
            <param name="columns">Number of columns in the sparse matrix</param>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based column indices</param>
            <param name="realData">The real data array for the sparse matrix</param>
            <param name="nonZeroMax">Maximum number of nonzero elements in the sparse matrix</param>
            <returns>The sparse numeric matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.MakeSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[],System.Double[])">
            <summary>
            Constructs a complex sparse, numeric matrix with the specified number of rows and columns.  
            It initializes the array with the supplied data. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= realData(k) + imaginaryData(k)*i. Any elements of the data arrays 
            that have duplicate values of rowIndex and columnIndex are added together.  
            Note: If the imaginaryData argument is null, this mehod will create a real sparse array.
            </remarks>
            <param name="rows">Number of rows in the sparse matrix</param>
            <param name="columns">Number of columns in the sparse matrix</param>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based column indices</param>
            <param name="realData">The real data array for the sparse matrix</param>
            <param name="imaginaryData">The imaginary data array for the sparse matrix</param>
            <returns>The sparse numeric matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.MakeSparse(System.Int32,System.Int32,System.Int32[],System.Int32[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Constructs a complex sparse, numeric matrix with the specified number of rows and columns and
            maximum nonzero elements.  It initializes the array with the supplied data. 
            </summary>
            <remarks>
            The row and column index arrays are used to construct the sparse array such that 
            S(rowIndex(k), columnIndex(k))= realData(k) + imaginaryData(k)*i. Any elements of the data arrays 
            that have duplicate values of rowIndex and columnIndex are added together.  
            Note: If the imaginaryData argument is null, this mehod will create a real sparse array.
            </remarks>
            <param name="rows">Number of rows in the sparse matrix</param>
            <param name="columns">Number of columns in the sparse matrix</param>
            <param name="rowIndex">An array of 1-based row indices</param>
            <param name="columnIndex">An array of 1-based column indices</param>
            <param name="realData">The real data array for the sparse matrix</param>
            <param name="imaginaryData">The imaginary data array for the sparse matrix</param>
            <param name="nonZeroMax">Maximum number of nonzero elements in the sparse matrix</param>
            <returns>The sparse numeric matrix</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.MarshalToFullArray``1(System.Int32,System.Int32[0:,0:],System.Int32,System.Int32[0:,0:],System.Int32,System.Array)">
            <summary internal= "true">
            Marshals data from a sparse array to a full array. 
            </summary>
            <returns>The equivalent full array populated with data from a sparse array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToArray(MathWorks.MATLAB.NET.Arrays.MWArrayComponent,System.Boolean)">
            <summary>
            Returns the requested (real/imaginary) component of a MATLAB numeric array as a native array with the same 
            dimensions as the numeric array. 
            </summary>
            <remarks>
            This method returns a copy of the array component in row major order.  The type of the array elements
            is determined by the data type of the numeric array. 
            </remarks>
            <param name="component">A flag indicating the array component to return.</param>
            <param name="sparseIndex">A flag indicating whether to allow encapsulation of a uint32 mxArray  This
            is used to return the array indices of a sparseArray.</param>
            <returns>A native array containing the requested component of the numeric array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.Clone">
            <summary>
            Makes a deep copy of a MATLAB numeric array.
            </summary>
            <remarks>
            See MATLAB documentation for the "=" operator.
            </remarks>
            <returns>The copy of the numeric array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToString">
            <summary>
            Returns a string representing the contents of the numeric array
            </summary>
            <returns>A formatted string representing the numeric array.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.Equals(System.Object)">
            <summary>
            Compares two MATLAB numeric arrays for equality.
            </summary>
            <param name="obj">A MATLAB numeric array referenced as an Object type.</param>
            <returns>The result of the comparison for equality</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.GetHashCode">
            <summary>
            Returns the hashcode for the MATLAB numeric array
            </summary>
            <returns>The hashcode for the numeric array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToVector(MathWorks.MATLAB.NET.Arrays.MWArrayComponent)">
            <summary>
            Returns the requested (real/imaginary) component of a MATLAB numeric array as a native array.
            </summary>
            <remarks>
            This method returns a copy of the array component in column major order.  The type of the array elements
            is determined by the data type of the numeric array. 
            </remarks>
            <param name="component">A flag indicating the array component to return.</param>
            <returns>A MATLAB numeric array containing the requested component of the numeric array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToArray">
            <summary>
            Returns a native array containing a copy of the underlying MATLAB data.
            </summary>
            <remarks>
            This method returns a copy of the array component in row major order.  The 
            dimensions of the MATLAB Array are maintained.  The type of the array elements
            is determined by the data type of the numeric array. If the MATLAB Array is a 
            complex data type, this method will throw an <c>InvalidDataException</c>.
            </remarks>
            <returns>A native array corresponding to the underlying MATLAB Array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.ToArray(MathWorks.MATLAB.NET.Arrays.MWArrayComponent)">
            <summary>
            Returns the requested (real/imaginary) component of a MATLAB numeric array as a native array with the same 
            dimensions as the numeric array. 
            </summary>
            <remarks>
            This method returns a copy of the array component in row major order.  The type of the array elements
            is determined by the data type of the numeric array. 
            </remarks>
            <param name="component">A flag indicating the array component to return.</param>
            <returns>A native array containing the requested component of the numeric array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWNumericArray.BuildNumericArray(System.Array,System.Array,System.Boolean,System.Boolean)">
            <summary internal= "true">
            Internal utility routine that returns a MATLAB mxArray for which the type, dimensions, 
            and data are defined by a native array of real and imaginary values.  
            </summary>
            <remarks>
            Valid data arrays are non-jagged arrays. of type byte, short, int, long, float, or double. 
            The returned MATLAB array will be of type double regardless of the element type of the native 
            array.  The imaginary data array can be null, but if present, its size and type must match 
            the real data array.  If required, this method will optionally convert the data arrays to 
            double and/or column major arrays. 
            </remarks>
            <param name="realData">An array that contains the real data.</param>
            <param name="imaginaryData">An array that contains the imaginary data.</param>
            <param name="makeDouble">Create a MATLAB double array</param>
            <param name="rowMajorData">A boolean flag indicating whether the data array is in column or row major order</param>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericArray.Inf">
            <summary>
            A MATLAB numeric array constant representing infinity.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericArray.NaN">
            <summary>
             MATLAB numeric array constant representing a non-number.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericArray._Empty">
            <summary internal= "true">
            Internal static member variable - Empty array
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWNumericArray.systemTypeToNumericType">
            <summary internal= "true">
            Internal static member variable - Numeric type to system type hashtable
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.Item(System.Int32[])">
            <summary>
            MATLAB real numeric array real component indexer
            </summary>
            <remarks>
            Returns the real component of the array element defined by the index.  An index can be any number 
            of integers corresponding to the array's dimensions.  As with MATLAB, a single index will return 
            the nth element in the array.
            <newpara></newpara> 
            NOTE: ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="indices">Array of integers corresponding to a MATLAB array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.Item(MathWorks.MATLAB.NET.Arrays.MWArrayComponent,System.Int32[])">
            <summary>
            MATLAB complex numeric array indexer
            </summary>
            <remarks>
            Returns the real or imaginary component of the array element defined by the index.  An index can be any number 
            of integers corresponding to the array's dimensions.  As with MATLAB, a single index will return the nth element 
            in the array.
            <newpara></newpara> 
            NOTE: ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="component">The component part of the complex value to return (real or imaginary)</param>
            <param name="indices">Array of integers corresponding to an array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.Empty">
            <summary>
            Read-only property returning a writeable version of an empty <c>MWNumericArray</c>.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.FloatingPointAccuracy">
            <summary>
            Read-only property returning the distance from 1.0 to the next largest floating-point number. 
            This property is a measure of the MATLAB floating-point accuracy. 
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray._Inf">
            <summary internal= "true">
            Returns a numeric scalar representing the infinite value.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray._NaN">
            <summary>
            Returns a numeric scalar representing the NaN value.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.NumericType">
            <summary>
            Returns the data type of the MATLAB numeric array.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsByte">
            <summary>
            Returns true if the MATLAB numeric array contains byte (unsigned int) data types.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsComplex">
            <summary>
            Returns true if the MATLAB numeric array contains complex data.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsDouble">
            <summary>
            Returns true if the MATLAB numeric array contains double data types.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsFloat">
            <summary>
            Returns true if the MATLAB numeric array contains floating point data types.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsInteger">
            <summary>
            Returns true if the MATLAB numeric array contains integer data types.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsLong">
            <summary>
            Returns true if the MATLAB numeric array contains long data types.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsInfinity">
            <summary>
            Returns true if the numeric array element is either positive or negative infinity (+Inf, -Inf)
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsNaN">
            <summary>
            Returns true if the numeric array element is not a number.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWNumericArray.IsShort">
            <summary>
            Returns true if the MATLAB numeric array contains short data types.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWArrayType">
            <summary>
            <c>MMArray</c> type enumeration.  
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayType.Array">
            <summary>
            Root array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayType.Index">
            <summary>
            Cell array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayType.Numeric">
            <summary>
            Numeric array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayType.Logical">
            <summary>
            Logical array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayType.Character">
            <summary>
            Character array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayType.Cell">
            <summary>
            Cell array type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayType.NativeObjArray">
            <summary>
            Native object type.
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWArrayType.Structure">
            <summary>
            Structure array type.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWStructArray">
            <summary>
            <c>MWStructArray</c> is the managed representation of the MATLAB structure array.  Like its MATLAB equivalent, 
            it consists of field values associated with field names.
            </summary>
            <remarks>
            See STRUCTURE FUNCTIONS in the MATLAB documentation for a full description of this array type.
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxAddField(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.String)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mclCreateSharedCopy(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxCalcSingleSubscript(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.Int32,System.Int32[])">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxCreateStructArray(System.Int32,System.Int32[],System.Int32,System.String[])">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxGetField(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.Int32,System.String)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxGetFieldNameByNumber(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.Int32)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxGetFieldNumber(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.String)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxGetNumberOfFields(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxRemoveField(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.Int32)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.mxSetField(MathWorks.MATLAB.NET.Utility.MWSafeHandle,System.Int32,System.String,MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.#ctor">
            <overloads>
             <summary>
             MATLAB structure array constructors.
             </summary>
             </overloads>
             <summary>
             Creates an empty MATLAB structure array.
             </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.#ctor(System.Int32,System.Int32,System.String[])">
            <summary>
            Creates a MATLAB structure array with the specified dimensions and field names.
            </summary>
            <param name="rows">The number of rows for the array.</param>
            <param name="columns">The number of columns for the array.</param>
            <param name="fieldNames">The field names for the array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.#ctor(System.Int32[],System.String[])">
            <summary>
            Creates a MATLAB structure array with the specified dimensions and field names.
            </summary>
            <param name="dimensions">A native array containing the dimensions for the structure array.</param>
            <param name="fieldNames">The field names for the structure array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.#ctor(MathWorks.MATLAB.NET.Arrays.MWArray[])">
            <summary>
            Creates a MATLAB structure array from the field name values pairs specified in a MATLAB array.
            </summary>
            <remarks>
            The field values must be cell arrays of the same size, scalar cells, or single values.
            <newpara></newpara>
            See STRUCT function in the MATLAB documentation.
            </remarks>
            <param name="fieldDefs">A MATLAB array of name value pairs containing a field name followed by a field value.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.#ctor(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal Constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal Dispose function
            </summary>
            <param name="disposing">Client explicit dispose flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary internal= "true">
            Internal Constructor - Deserialization constructor.
            </summary>
            <remarks>
            The arguments for this constructor are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="serializationInfo">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.ToString">
            <summary>
            Returns a string representing the MATLAB structure array
            </summary>
            <returns>A formatted string representing the structure array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.Clone">
            <summary>
            Makes a deep copy of an <c>MWStructArray</c>
            </summary>
            <remarks>
            See MATLAB documentation for the "=" operator.
            </remarks>
            <returns>The copy of the MATLAB structure array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.Equals(System.Object)">
            <summary>
            Compares two MATLAB structure arrays for equality returning a boolean value.
            </summary>
            <param name="obj">A structure array referenced as an Object type.</param>
            <returns>The result of the comparison for equality</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.GetHashCode">
            <summary>
            Returns the hashcode for the <c>MWStructArray</c>
            </summary>
            <returns>The hashcode for the structure array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.GetField(System.String,System.Int32)">
            <summary>
            Returns the contents of the specified field in the specified structure of
            an array of structures.
            </summary>
            <remarks>
            See GETFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The field name.</param>
            <param name="index">The index for an array of structures.</param>
            <returns>The contents of the specified field.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.GetField(System.String)">
            <summary>
            Returns the contents of the specified field in the structure array.
            </summary>
            <remarks>
            See GETFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The field name.</param>
            <returns>The contents of the specified field.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.IsField(System.String)">
            <summary>
            Returns true if the specified field is the name of a field in the structure array.
            </summary>
            <remarks>
            See ISFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The field name.</param>
            <returns>true if the field name is the name of a field in the structure array.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.RemoveField(System.String)">
            <summary>
            Removes the specified field from the structure array.
            </summary>
            <remarks>
            See RMFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The name of the field to remove.</param>
            <returns>The new structure array.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.SetField(System.String,MathWorks.MATLAB.NET.Arrays.MWArray)">
            <summary>
            Sets the contents of the specified field in the structure array.
            </summary>
            <remarks>
            See SETFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The name of the field.</param>
            <param name="fieldValue">The field value.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWStructArray.ToArray">
            <summary>
            Returns a .NET <c>Array</c> equivalent for the MATLAB struct array.
            </summary>
            <remarks>
            Before converting, a new array is derived by transorming the struct 
            array into a cell array such that a n by m by ... struct array with 
            p fields is transformed into a p by n by m by ... cell array. Each 
            element in the returned array is converted to a .NET array by calling 
            MWArray.toArray() on the corresponding cell. 
            </remarks>
            <returns>Array representing the MATLAB array of structures.</returns>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWStructArray._Empty">
            <summary internal= "true">
            Internal static member variable - Empty array
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWStructArray.Item(System.String,System.Int32[])">
            <summary>
            The MATLAB structure array indexer
            </summary>
            <remarks>
            An index consists of a field name and any number of integers corresponding to the array's dimensions.  
            As with MATLAB, a single numerical index will return the nth element in the array.   
            <newpara></newpara> 
            NOTE: ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="fieldName">The name of the field to return</param>
            <param name="indices">Array of integers corresponding to a MATLAB array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWStructArray.Item(System.String)">
            <summary>
            MATLAB structure array field indexer
            </summary>
            <remarks>
            The index must be a string representing the name of a field in the structure.  The 
            corresponding field value is returned by the indexer as an MWArray.  If the structure
            contains multiple elements, this indexer will return the value of the specified field 
            from the first element.
            <newpara></newpara> 
            See MATLAB documentation for structure array indexing.
            </remarks>
            <param name="fieldName">The name of a field within the structure.></param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWStructArray.Empty">
            <summary>
            Read only property returning a writeable version of an empty MWStructArray.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWStructArray.FieldNames">
            <summary>
            Returns the field names of the MATLAB structure array as a native array of strings.
            </summary>
            <remarks>
            See FIELDNAMES function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWStructArray.NumberOfFields">
            <summary>
            Returns the number of fields in the MATLAB structure array.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.native.MWStructArray">
            <summary>
            <c>MWStructArray</c> is the managed representation of the MATLAB structure array.  Like its MATLAB equivalent, 
            it consists of field values associated with field names.
            </summary>
            <remarks>
            See STRUCTURE FUNCTIONS in the MATLAB documentation for a full description of this array type.
            </remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.#ctor">
            <overloads>
             <summary>
             MATLAB structure array constructors.
             </summary>
             </overloads>
             <summary>
             Creates an empty MATLAB structure array.
             </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.#ctor(System.Int32,System.Int32,System.String[])">
            <summary>
            Creates a MATLAB structure array with the specified dimensions and field names.
            </summary>
            <param name="rows">The number of rows for the array.</param>
            <param name="columns">The number of columns for the array.</param>
            <param name="fieldNames">The field names for the array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.#ctor(System.Int32[],System.String[])">
            <summary>
            Creates a MATLAB structure array with the specified dimensions and field names.
            </summary>
            <param name="dimensions">A native array containing the dimensions for the structure array.</param>
            <param name="fieldNames">The field names for the structure array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.#ctor(System.Object[])">
            <summary>
            Creates a MATLAB structure array from the field name values pairs specified in a MATLAB array.
            </summary>
            <remarks>
            The field values must be cell arrays of the same size, scalar cells, or single values.
            <newpara></newpara>
            See STRUCT function in the MATLAB documentation.
            </remarks>
            <param name="fieldDefs">A MATLAB array of name value pairs containing a field name followed by a field value.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.ToString">
            <summary>
            Returns a string representing the MATLAB structure array
            </summary>
            <returns>A formatted string representing the structure array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.Clone">
            <summary>
            Makes a deep copy of an <c>MWStructArray</c>
            </summary>
            <remarks>
            See MATLAB documentation for the "=" operator.
            </remarks>
            <returns>The copy of the MATLAB structure array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.Equals(System.Object)">
            <summary>
            Compares two MATLAB structure arrays for equality returning a boolean value.
            </summary>
            <param name="obj">A structure array referenced as an Object type.</param>
            <returns>The result of the comparison for equality</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.GetHashCode">
            <summary>
            Returns the hashcode for the <c>MWStructArray</c>
            </summary>
            <returns>The hashcode for the structure array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.GetField(System.String,System.Int32)">
            <summary>
            Returns the contents of the specified field in the specified structure of
            an array of structures.
            </summary>
            <remarks>
            See GETFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The field name.</param>
            <param name="index">The index for an array of structures.</param>
            <returns>The contents of the specified field.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.GetField(System.String)">
            <summary>
            Returns the contents of the specified field in the structure array.
            </summary>
            <remarks>
            See GETFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The field name.</param>
            <returns>The contents of the specified field.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.SetField(System.String,System.Object)">
            <summary>
            Sets the contents of the specified field in the structure array.
            </summary>
            <remarks>
            See SETFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The name of the field.</param>
            <param name="fieldValue">The field value.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.IsField(System.String)">
            <summary>
            Returns true if the specified field is the name of a field in the structure array.
            </summary>
            <remarks>
            See ISFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The field name.</param>
            <returns>true if the field name is the name of a field in the structure array.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.RemoveField(System.String)">
            <summary>
            Removes the specified field from the structure array.
            </summary>
            <remarks>
            See RMFIELD function in the MATLAB documentation.
            </remarks>
            <param name="fieldName">The name of the field to remove.</param>
            <returns>The new structure array.</returns>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWStructArray._Empty">
            <summary internal= "true">
            Internal static member variable - Empty array
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.Item(System.String,System.Int32[])">
            <summary>
            The MATLAB structure array indexer
            </summary>
            <remarks>
            An index consists of a field name and any number of integers corresponding to the array's dimensions.  
            As with MATLAB, a single numerical index will return the nth element in the array.   
            <newpara></newpara> 
            NOTE: ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="fieldName">The name of the field to return</param>
            <param name="indices">Array of integers corresponding to a MATLAB array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.Item(System.String)">
            <summary>
            MATLAB structure array field indexer
            </summary>
            <remarks>
            The index must be a string representing the name of a field in the structure.  The 
            corresponding field value is returned by the indexer as an MWArray.  If the structure
            contains multiple elements, this indexer will return the value of the specified field 
            from the first element.
            <newpara></newpara> 
            See MATLAB documentation for structure array indexing.
            </remarks>
            <param name="fieldName">The name of a field within the structure.></param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.Empty">
            <summary>
            Read only property returning a writeable version of an empty MWStructArray.
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.FieldNames">
            <summary>
            Returns the field names of the MATLAB structure array as a native array of strings.
            </summary>
            <remarks>
            See FIELDNAMES function in the MATLAB documentation.
            </remarks>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWStructArray.NumberOfFields">
            <summary>
            Returns the number of fields in the MATLAB structure array.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.Images">
            <summary>
            Image Utility class used when converting RGB data from MATLAB into a .NET System.Drawing.Image object.  
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.Images.renderArrayData(MathWorks.MATLAB.NET.Arrays.MWArray)">
            <summary>
            Static method that converts RGB data from MATLAB into a .NET System.Drawing.Image object.  
            </summary>
            <param name="rgbData">MWArray containing the rgb data.</param>
            <returns>System.Drawing.Image object is returned.</returns>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.MWCharArray">
            <summary>
            <c>MWCharArray</c> derives from <c>MWArray</c> and is the managed representation of the MATLAB character array.  
            Like its MATLAB equivalent, <c>MWCharArray</c> provides support for string creation and manipulation.
            </summary>
            <Remarks>
            See STRING FUNCTIONS in the MATLAB documentation for a full description of this array type.
            </Remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.mxArrayToString(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.mxCreateCharArray(System.Int32,System.Int32[])">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.mxGetChars(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal function
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor">
            <overloads>
             <summary>
             MATLAB character array constructors.
             </summary>
             </overloads>
             <summary internal= "true">
             Default constructor - creates an empty character array
             </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor(System.Int32[])">
            <summary>
            Creates an empty character array with the specified dimensions.
            </summary>
            <remarks>
            If only one dimension is specified, an empty n-by-n character array is created.
            </remarks>
            <param name="dimensions">An integer array containing the dimensions for the character array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor(System.String)">
            <summary>
            Constructs a character array from a native string.
            </summary>  
            <param name="value">The native string.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor(System.Char)">
            <summary>
            Constructs a character array from a native character.
            </summary>  
            <param name="value">The native character.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor(System.Char[])">
            <summary>
            Constructs a character array from a native character array.
            </summary>  
            <param name="value">The native character array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor(System.String[])">
            <summary>
            Constructs a character array from a native string array.
            </summary>
            <remarks>
            The resulting character array will have a column size equal to the longest string in the native 
            string array.  The remaining strings will be padded to produce a valid matrix.  The number of
            rows will equal the number of strings in the array.
            </remarks>
            <param name="strings">A native array of string arguments.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor(System.Array)">
            <summary>
            Constructs an  m-by-n-by-p-by-... character array from a native array of string values.
            </summary>
            <remarks>
            The character array will have the same dimensions as the native string array.
            </remarks>
            <param name="stringArray">The native string array.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor(MathWorks.MATLAB.NET.Utility.MWSafeHandle)">
            <summary internal= "true">
            Internal constructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose function
            </summary>
            <param name="disposing">Client explicit dispose flag</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.op_Explicit(MathWorks.MATLAB.NET.Arrays.MWCharArray)~System.Char">
            <summary>
            Explicit cast from a MATLAB <c>MWCharArray</c> scalar to a native character value.
            </summary>
            <param name="scalar">A scalar MATLAB character array.</param>
            <returns>A native character value representing the scalar.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.op_Implicit(System.String)~MathWorks.MATLAB.NET.Arrays.MWCharArray">
            <summary>
            Implicit cast from a native string to a MATLAB character array.
            </summary>
            <param name="value">The native string.</param>
            <returns>An <c>MWCharArray</c> representing the string value.</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary internal= "true">
            Internal deserialization constructor.
            </summary>
            <remarks>
            The arguments for this constructor are supplied by the .NET serialization infrastructure.
            </remarks>
            <param name="serializationInfo">Holds the data needed to serialize or deserialize the object.</param>
            <param name="context">Describes the source and destination of the serialized stream.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.ToArray">
            <summary>
            Returns a native string array with the same dimensions and values as the character array. 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.ToString">
            <summary>
            Returns a native string representing the character array
            </summary>
            <returns>A formatted string representing the character array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.Clone">
            <summary>
            Makes a deep copy of a MATLAB character array
            </summary>
            <remarks>
            See MATLAB documentation for the "=" operator.
            </remarks>
            <returns>The copy of the <c>MWCharArray</c></returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.GetHashCode">
            <summary>
            Returns the hashcode for the MATLAB character array
            </summary>
            <returns>The hashcode for the <c>MWCharArray</c></returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.MWCharArray.Equals(System.Object)">
            <summary>
            Compares two MATLAB character arrays for equality.
            </summary>
            <param name="obj">An <c>MWCharArray</c> referenced as an Object type.</param>
            <returns>The result of the comparison for equality</returns>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.MWCharArray._Empty">
            <summary internal= "true">
            Internal static member variable - Empty array
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWCharArray.Item(System.Int32[])">
            <summary>
            The MATLAB character array indexer
            </summary>
            <remarks>
            An index can be any number of integers corresponding to the array's dimensions.  As with MATLAB, 
            a single index will return the nth element in the array.
            <newpara></newpara> 
            NOTE: ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="indices">Array of integers corresponding to an array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.MWCharArray.Empty">
            <summary>
            Read only property returning a writeable version of an empty <c>MWCharArray</c>.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Arrays.native.MWCellArray">
            <summary>
            <c>MWCellArray</c> derives from <c>MWArray</c> and is the managed representation of the MATLAB cell array.   
            Each element in a cell array is a container that can hold an <c>MWArray</c> or one of its derived types, 
            including another <c>MWCellArray</c>.
            </summary>
            <Remarks>
            See CELL ARRAY in the MATLAB documentation for a full description of this array type.
            </Remarks>
            <threadsafety static="true" instance="false"/>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWCellArray.#ctor">
            <overloads>
             <summary>
             MATLAB cell array constructors.
             </summary>summary>
             <remarks>
             See CELL, CELLSTR, NUM2CELL, STRUCT2CELL functions in the MATLAB documentation.
             </remarks>
             </overloads>
             <summary>
             Creates an empty cell array.
             </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWCellArray.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an M-by-N empty cell array.
            </summary>
            <param name="rows">The number of rows in the new cell array</param>
            <param name="columns">The number of columns in the new cell array</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWCellArray.#ctor(System.Int32[])">
            <summary>
            Creates an M-by-N-by-P-by-... empty cell array.
            </summary>
            <remarks>
            If only one dimension is specified, an empty N-by-N cell array is created.
            </remarks>
            <param name="dimensions">An array containing the cell array dimensions.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWCellArray.Clone">
            <summary>
            Makes a deep copy of a MATLAB cell array
            </summary>
            <remarks>
            See MATLAB documentation for the "=" operator.
            </remarks>
            <returns>The copy of the cell array</returns>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Arrays.native.MWCellArray.Equals(System.Object)">
            <summary>
            Compares the current <c>MWCellArray</c> instance with the specified cell array for equality; returning a boolean value.
            </summary>
            <param name="obj">An <c>MWCellArray</c> referenced as an Object type.</param>
            <returns>true if the MATLAB arrays are equal.</returns>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Arrays.native.MWCellArray._Empty">
            <summary internal= "true">
            Internal static member variable - Empty array
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWCellArray.Item(System.Int32[])">
            <summary>
            Generic MATLAB array indexer returning the result as an <c>MWArray</c>
            </summary>
            <remarks>
            An index can be any number of integers corresponding to the array's dimensions.  As with MATLAB, 
            a single index will return the nth element in the array.
            <newpara></newpara> 
            NOTE: The generic array indexer supports numeric, logical, char, and cell array types.  
            For complex numeric arrays, both the real and the imaginary components are returned.
            ARRAY INDEXING IN THIS API, AS IN MATLAB, IS ONE BASED RATHER THAN ZERO BASED  
            <newpara></newpara> 
            </remarks>
            <param name="indices">Array of integers corresponding to an array subscript</param>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Arrays.native.MWCellArray.Empty">
            <summary>
            Read only property returning a writeable version of an empty <c>MWCellArray</c>.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.NOJVMAttribute">
            <summary>
            The NOJVMAttribute attribute represents an MCR option that allows users to launch MCR
            without the JAVA Virtual Machine support.
            </summary>
            <remarks>
            The use of this attribute is optional, however, if it is defined it must be specified on the main
            assembly.  If it is not specified, the default behavior is to launch MCR with Java enabled 
            </remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.NOJVMAttribute.#ctor(System.Boolean)">
            <summary>
            Public <c>NOJVMAttribute</c> constructor
            </summary>
            <param name="JVMDisable">Flag to disable JVM support.</param>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.NOJVMAttribute.disableJVM">
            <summary internal= "true">
            Private variable
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.NOJVMAttribute.JVMDisabled">
            <summary>
            Returns true if Java support for MCR is disabled.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.LOGFILEAttribute">
            <summary>
            The <c>LOGFILEAttribute</c> attribute represents an MCR option that allows users to pass the name of the logfile
            that will catch the output displayed by MCR.
            </summary>
            <remarks>
            The use of this attribute is optional, however, if it is defined it must be specified on the main
            assembly.  If it is not specified, no logfile is created 
            </remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.LOGFILEAttribute.#ctor(System.String)">
            <summary>
            Public <c>LOGFILEAttribute</c> constructor
            </summary>
            <param name="fileName">Name of the file that will be used for creating logfile.</param>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.LOGFILEAttribute.fName">
            <summary internal= "true">
            Private variable
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.LOGFILEAttribute.LogfileName">
            <summary>
            Returns the name of logfile.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.MWMCROptionAttribute">
            <summary>
            The MWMCROptionAttribute attribute represents an MCR option. This is for internal use only.
            </summary>
            <remarks>
            The use of this attribute is optional, however, if it is defined it must be specified on the main
            assembly. This option is for internal use only.   
            </remarks>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWMCROptionAttribute.#ctor(System.String)">
            <summary>
            Public <c>MWMCROptionAttribute</c> constructor
            </summary>
            <param name="OptVal">String representing MCR option.</param>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWMCROptionAttribute.option">
            <summary internal= "true">
            Private variable
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.MWMCROptionAttribute.MWMCROption">
            <summary>
            Returns the string representing the MCR option.
            </summary>
        </member>
        <member name="T:MathWorks.MATLAB.NET.Utility.MWException">
            <summary internal= "true">
            MWException is an internal utility class that allows the user to get the stack trace of M-Code. 
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWException.#ctor(System.String,System.String[])">
            <summary>
            Public constructor
            </summary>
            <param name="msg">The last error message from M-code.</param>
            <param name="stack">The stack trace for M-code.</param>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWException.Finalize">
            <summary internal= "true">
            Internal destructor
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWException.Dispose">
            <summary internal= "true">
            Internal dispose method
            </summary>
        </member>
        <member name="M:MathWorks.MATLAB.NET.Utility.MWException.Dispose(System.Boolean)">
            <summary internal= "true">
            Internal dispose method
            </summary>
            <param name="disposing">"True" if disposed method was explicitly called by client</param>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWException.disposed">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="F:MathWorks.MATLAB.NET.Utility.MWException.mwStack">
            <summary internal= "true">
            Private member variable
            </summary>
        </member>
        <member name="P:MathWorks.MATLAB.NET.Utility.MWException.StackTrace">
            <summary>
            Public property displaying stack trace for m-code and .NET application.
            </summary>
        </member>
    </members>
</doc>
